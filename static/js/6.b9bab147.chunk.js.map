{"version":3,"sources":["components/utils/utils.js","components/utils/BrowserResult.js","components/utils/config.js","components/utils/InFile.js","components/utils/EncTypeTab.js","components/utils/Passphrase.js","components/utils/KeyInput.js","components/encrypt/EncResult.js","components/encrypt/EncryptForm.js","components/encrypt/Encrypt.js"],"names":["FileType","require","mimes","txt","csv","html","css","extSelect","decrypted","decType","a","fileType","fromBuffer","bufferType","ext","decFormat","show","severity","message","decGeneric","decPW","decSuccess","encSuccess","encError","resetAlert","keyError","privKeyPassError","useStyles","makeStyles","theme","result","maxHeight","maxWidth","overflowY","button","margin","copy","marginLeft","Display","props","classes","useState","open","vertical","horizontal","openSnack","setOpenSnack","inputId","id","keyIn","val","className","title","aria-label","onClick","copyText","document","getElementById","textContent","textArea","createElement","setAttribute","body","append","select","setSelectionRange","execCommand","remove","anchorOrigin","onClose","key","snackLocation","hidden","visibility","width","helpText","spacing","InFile","selectedFile","fileMetaData","name","handleDelete","click","variant","color","label","type","onChange","readFile","formByteInputError","error","errMessage","AntTabs","withStyles","root","borderBottom","indicator","backgroundColor","Tabs","AntTab","textTransform","minWidth","fontWeight","typography","fontWeightRegular","marginRight","fontFamily","join","opacity","fontWeightMedium","selected","disableRipple","flexGrow","padding","demo1","palette","background","paper","demo2","EncTypeTab","React","value","setValue","event","newValue","handleType","pwInput","pw","marginTop","buttonProgress","position","top","left","main","breakpoints","up","PassPhraseConfirm","confirmPassPhrase","setConfirmPassPhrase","status","confirmError","handleClose","aria-labelledby","required","autoFocus","e","target","fullWidth","handleConfirm","buttonText","PassPhrase","passPhrase","passPhraseState","passPhraseMissingError","errors","setErrors","setOpen","score","resp","strength","setStrength","strengthResp","0","1","2","3","4","container","item","helperText","zxcvbn","class","length","pt","disabled","loading","preventDefault","err","handleSubmit","mainButtonText","size","modalButtonText","openpgp","KeyInput","console","log","inputType","privateKey","encrypt","resetErr","alert","setAlert","byteKey","setByteKey","inputTypeSelect","setInputTypeSelect","formTextInputError","setFormTextInputError","setFormByteInputError","setFileMetaData","passPhraseError","setPassPhraseError","setPassPhrase","reason","textBox","multiline","rows","buttonLabel","undefined","file","files","reader","FileReader","readAsText","onloadend","replace","onerror","handlePrivateKey","outkey","handlePublicKey","handleKeyEncrypt","readArmored","rsaKey","keys","decrypt","output","autoHideDuration","gutterBottom","component","row","defaultValue","control","labelPlacement","mt","height","Result","openEnc","setOpenEnc","armorTxt","disableCopy","Box","Typography","mb","pr","Button","textVal","element","Blob","href","URL","createObjectURL","download","split","outputHandler","reset","paddingLeft","paddingRight","paddingBottom","EncryptForm","textInput","textInputState","uploadedFile","setUploadedFile","TextField","readAsArrayBuffer","Uint8Array","handleFormSubmit","handleEncrypt","encryptionKey","aes","rsa","encType","onSubmit","pb","FormControl","RadioGroup","FormControlLabel","Radio","loader","keyErr","display","header","Encrypt","success","setSuccess","setLoader","setEncType","setArmorTxt","byteEncrypt","pubKey","binInd","inputMessage","fromBinary","fromText","encIn","armor","publicKeys","passwords","packets","write","form","Snackbar","Alert","p","heading"],"mappings":"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","file":"static/js/6.b9bab147.chunk.js","sourcesContent":["const FileType = require(\"file-type\");\n\nexport const mimes = {\n  txt: \"text/plain\",\n  csv: \"text/csv\",\n  html: \"text/html\",\n  css: \"text/css\",\n};\n\nexport const extSelect = async (decrypted, decType) => {\n  let bufferType\n  if (decType.fileType==='byte'){\n    bufferType =  await FileType.fromBuffer(decrypted);\n  }\n\n  if (bufferType) {\n    return bufferType.ext;\n  } else if (decType.fileType === \"text\") {\n    return decType.ext;\n  } else {\n    return \"txt\";\n  }\n};\n\nexport const decFormat = {\n  show: true,\n  severity: \"error\",\n  message:\n    \"Looks like there is a format issue with your Encrypted text. We recommend using the original text file supplied!\",\n};\n\nexport const decGeneric = {\n  show: true,\n  severity: \"error\",\n  message: \"Something went wrong! Please try again.\",\n};\n\nexport const decPW = {\n  show: true,\n  severity: \"error\",\n  message: \"Passphrase is incorrect!\",\n};\n\nexport const decSuccess = {\n  show: true,\n  severity: \"success\",\n  message: \"Successfully decrypted!\",\n};\n\nexport const encSuccess = {\n  show: true,\n  message: \"Encryption Complete\",\n  severity: \"success\",\n}\n\nexport const encError = {\n  show: true,\n  message: \"Something went wrong! Please try again.\",\n  severity: \"error\",\n};\n\nexport const resetAlert = {\n  show: false,\n  message: \"\",\n  severity: \"\",\n};\n\n\nexport const keyError = {\n  show: true,\n  message: \"Invalid RSA Key! Please try again.\",\n  severity: \"error\",\n};\n\nexport const privKeyPassError = {\n  show: true,\n  message: \"Incorrect Passphrase! Please try again.\",\n  severity: \"error\",\n};\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\n\nconst useStyles = makeStyles((theme) => ({\n\n  result: {\n    maxHeight: \"100px\",\n    maxWidth: \"350px\",\n    overflowY: \"scroll\",\n  },\n  button: {\n    margin: \"5px\",\n  },\n  copy: {\n    marginLeft: \"318px\",\n  },\n}));\n\n  \n  const Display = (props) => {\n    const classes = useStyles();\n    const [openSnack, setOpenSnack] = useState({\n      open: false,\n      vertical: \"bottom\",\n      horizontal: \"left\",\n    });\n  \n    const { vertical, horizontal, open } = openSnack;\n  \n    let inputId = props.id;\n    let keyIn = props.val;\n  \n    const handleCopy = () => {\n      setOpenSnack({ ...openSnack, open: true });\n      let copyText = document.getElementById(inputId).textContent;\n      const textArea = document.createElement(\"textarea\");\n      textArea.setAttribute(\"id\", \"copy\");\n      textArea.textContent = copyText;\n      document.body.append(textArea);\n      textArea.select();\n      textArea.setSelectionRange(0, 99999); /*For mobile devices*/\n  \n      /* Copy the text inside the text field */\n      document.execCommand(\"copy\");\n      textArea.remove();\n    };\n  \n    const handleClose = () => {\n      setOpenSnack({ ...openSnack, open: false });\n    };\n    return (\n      <>\n        <div className={classes.copy}>\n          <Tooltip title=\"Copy\">\n            <IconButton aria-label=\"Copy\" onClick={handleCopy}>\n              <FileCopyIcon />\n            </IconButton>\n          </Tooltip>\n        </div>\n        <Paper className={classes.result}>\n            <pre id={inputId}>{keyIn}</pre>\n        </Paper>\n  \n        <Snackbar\n          anchorOrigin={{ vertical, horizontal }}\n          open={open}\n          onClose={handleClose}\n          message=\"Copied to clipboard\"\n          key={vertical + horizontal}\n        />\n      </>\n    );\n  };\n  \n  export default Display;","export const snackLocation = { vertical: \"bottom\", horizontal: \"left\" }\n\nexport const menuOptions = {1:'ENCRYPT', 2:'DECRYPT', 3: 'KEY CREATION', 4: 'ABOUT'}","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport DeleteOutlineSharpIcon from \"@material-ui/icons/DeleteOutlineSharp\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\n\nconst useStyles = makeStyles((theme) => ({\n  hidden: {\n    visibility: \"hidden\",\n    width: \"1px\",\n  },\n  helpText: {\n    marginLeft: theme.spacing(2),\n  },\n}));\n\nconst InFile = (props) => {\n  const classes = useStyles();\n\n  const selectedFile = props.fileMetaData && (\n    <div>\n      <FormLabel>{`Selected: ${props.fileMetaData.name}`}</FormLabel>\n      <IconButton onClick={props.handleDelete}>\n        <DeleteOutlineSharpIcon />\n      </IconButton>\n    </div>\n  );\n  return (\n    <Box>\n      <Button\n        onClick={() => document.getElementById(\"inp\").click()}\n        variant=\"outlined\"\n        color=\"secondary\"\n      >\n        {props.label}\n      </Button>\n\n      <input\n        id=\"inp\"\n        type=\"file\"\n        className={classes.hidden}\n        onChange={props.readFile}\n      />\n      {selectedFile}\n      {props.formByteInputError && (\n        <div className={classes.helpText}>\n          <FormHelperText error={true}>\n            {props.errMessage ? props.errMessage : \"File Required\"}\n          </FormHelperText>\n        </div>\n      )}\n    </Box>\n  );\n};\n\nexport default InFile;\n","import React from \"react\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst AntTabs = withStyles({\n  root: {\n    borderBottom: \"1px solid #e8e8e8\",\n    // width: '700px'\n  },\n  indicator: {\n    backgroundColor: \"#1de9b6\",\n  },\n})(Tabs);\n\nconst AntTab = withStyles((theme) => ({\n  root: {\n    textTransform: \"none\",\n    minWidth: 72,\n    fontWeight: theme.typography.fontWeightRegular,\n    marginRight: theme.spacing(4),\n    fontFamily: [\n      \"-apple-system\",\n      \"BlinkMacSystemFont\",\n      '\"Segoe UI\"',\n      \"Roboto\",\n      '\"Helvetica Neue\"',\n      \"Arial\",\n      \"sans-serif\",\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(\",\"),\n    \"&:hover\": {\n      color: \"#4aedc4\",\n      opacity: 1,\n    },\n    \"&$selected\": {\n      color: \"#1de9b6\",\n      fontWeight: theme.typography.fontWeightMedium,\n    },\n    \"&:focus\": {\n      color: \"#1de9b6\",\n    },\n  },\n  selected: {},\n}))((props) => <Tab disableRipple {...props} />);\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    // maxWidth:'600px'\n    // marginRight:'50%',\n  },\n  padding: {\n    padding: theme.spacing(2),\n  },\n  demo1: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  demo2: {\n    backgroundColor: \"#2e1534\",\n  },\n}));\n\nexport default function EncTypeTab(props) {\n  //lift up to reset on load of new tab\n\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n    props.handleType(newValue);\n  };\n  return (\n    <div className={classes.root}>\n      <AntTabs value={value} onChange={handleChange} aria-label=\"ant example\">\n        <AntTab label=\"Passhrase (Symmetric)\" />\n        <AntTab label=\"Key Pair (Asymmetric)\" />\n      </AntTabs>\n      <Typography className={classes.padding} />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport zxcvbn from \"zxcvbn\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  pwInput: {\n    width: \"225px\",\n  },\n  pw: {\n    color: \"#777fa7\",\n    marginTop: \"18px\",\n  },\n  buttonProgress: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n  main: {\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      padding: theme.spacing(2),\n    },\n  },\n}));\n\nconst PassPhraseConfirm = (props) => {\n  const [confirmPassPhrase, setConfirmPassPhrase] = useState();\n\n  const passPhraseConfirmBuffer = (e) => {\n    setConfirmPassPhrase(e.target.value);\n  };\n\n  const status = props.open;\n\n  const label = props.confirmError\n    ? \"Please Try Again\"\n    : \"Passphrase Confirmation\";\n\n  return (\n    <div>\n      <Dialog\n        open={status}\n        onClose={props.handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">\n          Passphrase Confirmation\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please re enter your passphrase below:\n          </DialogContentText>\n          <TextField\n            required\n            autoFocus\n            error={props.confirmError}\n            onChange={passPhraseConfirmBuffer}\n            margin=\"dense\"\n            id=\"name\"\n            label={label}\n            type=\"password\"\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            onClick={() => props.handleConfirm(confirmPassPhrase)}\n            color=\"primary\"\n          >\n            {props.buttonText}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nconst PassPhrase = (props) => {\n  const classes = useStyles();\n\n  const [passPhrase, passPhraseState] = useState(\"\");\n  const [errors, setErrors] = useState({\n    confirmError: false,\n    passPhraseMissingError: false,\n  });\n  const [open, setOpen] = useState(false);\n  const [strength, setStrength] = useState({ score: null, resp: null });\n\n  let strengthResp = {\n    0: \"Very Bad 👎\",\n    1: \"Bad 👎\",\n    2: \"Weak 😐\",\n    3: \"Good 🙂\",\n    4: \"Strong 🔥🔥🔥\",\n  };\n\n  const handlePassPhrase = (e) => {\n    passPhraseState(e.target.value);\n    const result = zxcvbn(e.target.value);\n    setStrength({\n      score: result.score === 0 ? \"1\" : result.score,\n      resp: strengthResp[result.score],\n    });\n  };\n\n  let handleSubmit = (e) => {\n    e.preventDefault();\n    setErrors({ ...errors, passPhraseMissingError: false });\n    const err = props.handleSubmit(e);\n\n    if (!passPhrase) {\n      setErrors({ ...errors, passPhraseMissingError: true });\n    }\n    if (!passPhrase || err) {\n      return;\n    } else {\n      setOpen(true);\n    }\n  };\n\n  const handleConfirm = (confirmPassPhrase) => {\n    if (confirmPassPhrase === passPhrase) {\n      setOpen(false);\n      props.handleConfirm(passPhrase);\n    } else {\n      setErrors({ ...errors, confirmError: true });\n    }\n  };\n\n  return (\n    <div className={classes.main}>\n      <Box>\n        <Grid container spacing={1}>\n          <Grid item>\n            <TextField\n              required\n              helperText={\n                errors.passPhraseMissingError && \"PassPhrase Required!\"\n              }\n              onChange={handlePassPhrase}\n              className={props.class}\n              error={errors.passPhraseMissingError}\n              id=\"pw-in\"\n              type=\"password\"\n              label={\"PassPhrase\"}\n              variant=\"outlined\"\n              // variant=\"filled\"\n            />\n          </Grid>\n          {passPhrase.length > 0 && (\n            <Grid className={classes.pw} item>\n              {strength.resp}\n            </Grid>\n          )}\n        </Grid>\n      </Box>\n\n      <Box pt={3}>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color={\"primary\"}\n          disabled={props.loading}\n          onClick={handleSubmit}\n        >\n          {props.mainButtonText}\n          {props.loading && (\n            <CircularProgress\n              size={24}\n              color=\"primary\"\n              className={classes.buttonProgress}\n            />\n          )}\n        </Button>\n      </Box>\n\n      <PassPhraseConfirm\n        open={open}\n        buttonText={props.modalButtonText}\n        handleClose={() => setOpen(false)}\n        handleConfirm={handleConfirm}\n        confirmError={errors.confirmError}\n      />\n    </div>\n  );\n};\n\nexport default PassPhrase;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { resetAlert, keyError, privKeyPassError } from \"../utils/utils\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {snackLocation} from '../utils/config';\nimport InFile from \"../utils/InFile\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst openpgp = require(\"openpgp\");\n\nconst useStyles = makeStyles((theme) => ({\n\n  buttonProgress: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n\n  main: {\n    backgroundColor: '#FAFAFA',\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      padding: theme.spacing(2),\n    },\n  }\n}\n));\n\nconst KeyInput = (props) => {\n  const classes = useStyles();\n  console.log('mount')\n\n  let privateKey = props.privateKey\n  let encrypt = props.encrypt\n\n  let resetErr = { err: false, key: false, message: false };\n\n  const [alert, setAlert] = useState(resetAlert);\n  const [byteKey, setByteKey] = useState();\n  const [inputTypeSelect, setInputTypeSelect] = useState(\"byte\");\n  const [formTextInputError, setFormTextInputError] = useState(resetErr);\n  const [formByteInputError, setFormByteInputError] = useState(resetErr);\n  const [fileMetaData, setFileMetaData] = useState();\n  const [passPhraseError, setPassPhraseError] = useState(false);\n  const [passPhrase, setPassPhrase] = useState(\"\");\n\n  const handlePassPhrase = (e) => setPassPhrase(e.target.value);\n\n\n  const handleDelete = () => {\n    setByteKey(undefined);\n    setFileMetaData(undefined);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setAlert(resetAlert);\n  };\n\n  const handleTextInput = (e) => {\n    setByteKey(e.target.value);\n  };\n\n  const handleInputType = (e) => {\n    setInputTypeSelect(e.target.value);\n  };\n\n  const readKey = (e) => {\n    var file = e.target.files[0];\n    if (!file) return;\n    var reader = new FileReader();\n    reader.readAsText(file);\n\n    reader.onloadend = () => {\n      setFileMetaData({ name: file.name, type: file.type.replace(\"/\", \"_\") });\n      setByteKey(reader.result);\n    };\n    reader.onerror = () => {setByteKey(undefined)};\n  };\n\n  let inputType;\n  if (inputTypeSelect === \"text\") {\n    inputType = (\n      <TextField\n        helperText={formTextInputError.err && formTextInputError.message}\n        className={classes.textBox}\n        fullWidth={true}\n        error={formTextInputError.err}\n        id=\"outlined-multiline-static\"\n        label={\"RSA Key Input\"}\n        multiline\n        rows={10}\n        onChange={handleTextInput}\n        variant=\"outlined\"\n      />\n    );\n  } else {\n    inputType = (\n      <InFile\n        formByteInputError={formByteInputError.err}\n        errMessage={formByteInputError.err.message}\n        fileMetaData={fileMetaData}\n        label='Key Browse'\n        buttonLabel={\"key browse\"}\n        handleDelete={handleDelete}\n        fileMetaData={fileMetaData}\n        readFile={readKey}\n\n\n        // err={formByteInputError}\n        // formByteInputError={formByteInputError}\n        // readFile={readKey}\n        // setUploadedFile={setByteKey}\n        // setFileMetaData={setFileMetaData}\n      />\n    );\n  }\n  console.log(formByteInputError)\n\n  const removeErrors = () => {\n    setAlert(resetAlert);\n    setFormTextInputError(resetErr);\n    setFormByteInputError(resetErr);\n    setPassPhraseError(false);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    removeErrors();\n\n    let err = false,\n      outkey;\n\n    if (passPhrase === \"\") {\n      setPassPhraseError(true);\n      err = true;\n    }\n\n    if (!byteKey || byteKey === \"\") {\n      if (inputTypeSelect === \"text\") {\n        setFormTextInputError({\n          ...formTextInputError,\n          err: true,\n          message: \"Key Text Required\",\n        });\n      } else {\n        setFormByteInputError({\n          ...formByteInputError,\n          err: true,\n          message: \"Key File Required\",\n        });\n      }\n      err = true;\n    } else {\n      privateKey\n        ? ({ key: outkey, error: err } = await handlePrivateKey(\n            byteKey,\n            passPhrase\n          ))\n        : ({ key: outkey, error: err } = await handlePublicKey(byteKey));\n    }\n\n    //continue to snag error in other input\n\n    props.handleKeyEncrypt(outkey, err);\n  };\n\n  const handlePublicKey = async (byteKey) => {\n    let rsaKey = (await openpgp.key.readArmored(byteKey)).keys[0];\n    if (!rsaKey) {\n      setAlert(keyError);\n      return { key: undefined, error: true };\n    } else {\n      return { key: rsaKey, error: false };\n    }\n  };\n\n  const handlePrivateKey = async (byteKey, passPhrase) => {\n    let output;\n    try {\n      const {\n        keys: [privateKey],\n      } = await openpgp.key.readArmored(byteKey);\n      await privateKey.decrypt(passPhrase);\n      output = [privateKey];\n      return { key: output, error: false };\n    } catch (e) {\n      e.message === \"Incorrect key passphrase\" && setAlert(privKeyPassError);\n      e.message === \"privateKey is undefined\" && setAlert(keyError);\n      return { key: undefined, error: true };\n    }\n  };\n\n  return (\n    <div className={classes.main}>\n      {alert.show && (\n        <Snackbar\n          anchorOrigin={snackLocation}\n          open={alert.show}\n          autoHideDuration={10000}\n          onClose={handleClose}\n        >\n          <Alert onClose={handleClose} severity={alert.severity}>\n            {alert.message}\n          </Alert>\n        </Snackbar>\n      )}\n      <Box>\n        <Box>\n        <Typography color='textPrimary' variant=\"h6\" gutterBottom>\n            <b>Key Input</b>\n          </Typography>\n          <FormControl component=\"fieldset\">\n            <RadioGroup\n              row\n              aria-label=\"position\"\n              name=\"position\"\n              value={inputTypeSelect}\n              defaultValue=\"top\"\n              onChange={handleInputType}\n            >\n              <FormControlLabel\n                value=\"byte\"\n                control={<Radio color=\"secondary\" />}\n                label=\"Import from file\"\n                labelPlacement=\"end\"\n              />\n              <FormControlLabel\n                value=\"text\"\n                control={<Radio color=\"primary\" />}\n                label=\"Paste in text\"\n                labelPlacement=\"end\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </Box>\n        <Box>\n          <FormLabel component=\"legend\"></FormLabel>\n          <Box mt={3}>{inputType}</Box>\n        </Box>\n        {privateKey && (\n          <Box pt={3}>\n            <TextField\n              required\n              helperText={passPhraseError && \"Passphrase Required!\"}\n              onChange={handlePassPhrase}\n              error={passPhraseError}\n              id=\"pw-in private key\"\n              type=\"password\"\n              label={\"Private Key Passphrase\"}\n              variant=\"outlined\"\n            />\n          </Box>\n        )}\n        <Box pt={3}>\n          <Button variant=\"contained\" color={\"primary\"} onClick={handleSubmit} disabled={props.loading}>\n            {encrypt ? \"Encrypt!\" : \"Decrypt!\"}\n            {props.loading && (\n            <CircularProgress\n              size={24}\n              color=\"primary\"\n              className={classes.buttonProgress}\n            />\n          )}\n          </Button>\n        </Box>\n      </Box>\n    </div>\n  );\n};\n\nexport default KeyInput;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Display from \"../utils/BrowserResult\";\n\nconst useStyles = makeStyles((theme) => ({\n  main: {\n    padding: theme.spacing(2),\n\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      padding: theme.spacing(2),\n    },\n  },\n\n  result: {\n    maxHeight: \"100px\",\n    maxWidth: \"350px\",\n    overflowY: \"scroll\",\n  },\n  paper: {\n    height: \"100px\",\n    width: \"350px\",\n  },\n  button: {\n    margin: \"5px\",\n  },\n}));\n\nconst Result = (props) => {\n  const classes = useStyles();\n\n  const [openEnc, setOpenEnc] = useState(false);\n\n  let armorTxt = props.armorTxt;\n  let disableCopy = armorTxt.armorTxt.length > 10000;\n\n  const outputHandler = (textVal) => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([textVal.armorTxt], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = `${element.href.split(\"/\")[3]}_${textVal.ext}_.aes\"`;\n    element.click();\n    element.remove();\n  };\n\n  return (\n    <div className={classes.main}>\n      <Box pt={2}>\n        <Typography variant=\"h6\" gutterBottom>\n          Encrypted Data:\n        </Typography>\n        <Box>\n          Here are your results.<br/>\n           We recommend downloading the file.<br/>\n          \n            Don't worry, if you prefer working with text yourself, we provide\n            that too.{\" \"}\n          <br/>\n          <br />\n        </Box>\n        <Box mb={2} pr={4}>\n          <Button\n            disabled={disableCopy}\n            onClick={() => setOpenEnc(!openEnc)}\n            variant=\"outlined\"\n            color={\"secondary\"}\n            className={classes.button}\n          >\n            {!openEnc ? \"In Browser\" : \"Hide\"}\n          </Button>\n\n          <Button\n            onClick={() => outputHandler(armorTxt)}\n            variant=\"outlined\"\n            color={\"secondary\"}\n            className={classes.button}\n          >\n            Download\n          </Button>\n          {openEnc && <Display val={armorTxt.armorTxt} id=\"encryptedResult\" />}\n        </Box>\n        <Box>\n          <Button\n            onClick={props.reset}\n            variant=\"contained\"\n            className={classes.button}\n            color={\"primary\"}\n          >\n            {\" \"}\n            New Encryption{\" \"}\n          </Button>\n        </Box>\n      </Box>\n    </div>\n  );\n};\n\nexport default Result;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport PassPhrase from \"../utils/Passphrase\";\nimport KeyInput from \"../utils/KeyInput\";\nimport InFile from \"../utils/InFile\";\n\nconst useStyles = makeStyles((theme) => ({\n\n  textBox: {\n    maxWidth: \"700px\",\n  },\n  main: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n  },\n}));\n\nconst EncryptForm = (props) => {\n  const classes = useStyles();\n\n  const [inputTypeSelect, setInputTypeSelect] = useState(\"byte\");\n  const [textInput, textInputState] = useState(\"\");\n  const [formTextInputError, setFormTextInputError] = useState(false);\n  const [formByteInputError, setFormByteInputError] = useState(false);\n  const [uploadedFile, setUploadedFile] = useState();\n  const [fileMetaData, setFileMetaData] = useState();\n\n  const readFile = (e) => {\n    var file = e.target.files[0];\n    if (!file) return;\n    var reader = new FileReader();\n    reader.readAsArrayBuffer(file);\n    \n\n    reader.onloadend = () => {\n      setUploadedFile(new Uint8Array(reader.result));\n      setFileMetaData({ name: file.name, type: file.type.replace(\"/\", \"_\") });\n    };\n\n    reader.onerror = () => {setUploadedFile(undefined)};\n  };\n\n \n  const handleDelete = () => {\n    setUploadedFile(undefined);\n    setFileMetaData(undefined);\n  };\n\n  const handleTextInput = (e) => {\n    textInputState(e.target.value);\n  };\n\n  const handleInputType = (e) => {\n    setFormTextInputError(false);\n    setFormByteInputError(false);\n    setInputTypeSelect(e.target.value);\n  };\n\n  let inputType;\n  if (inputTypeSelect === \"text\") {\n    inputType = (\n      <TextField\n        helperText={formTextInputError && \"Please Select a file object!\"}\n        className={classes.textBox}\n        fullWidth={true}\n        error={formTextInputError}\n        id=\"outlined-multiline-static\"\n        label=\"Text to Encrypt\"\n        multiline\n        rows={10}\n        onChange={handleTextInput}\n        variant=\"outlined\"\n      />\n    );\n  } else {\n    inputType = (\n      <InFile\n        fileMetaData={fileMetaData}\n        formByteInputError={formByteInputError}\n        readFile={readFile}\n        handleDelete={handleDelete}\n        label='Browse for File'\n      />\n    );\n  }\n  \n  const handleFormSubmit = () => {\n    setFormTextInputError(false);\n    setFormByteInputError(false);\n\n    if (inputTypeSelect === \"text\" && (!textInput || textInput === \"\")) {\n      setFormTextInputError(true);\n      return true;\n    } else if (inputTypeSelect === \"byte\" && !uploadedFile) {\n      setFormByteInputError(true);\n      return true;\n    }\n    return false;\n  };\n\n  const handleKeyEncrypt = (byteKey, keyErr) => {\n    let errCheck = handleFormSubmit();\n    if (!errCheck && !keyErr) {\n      handleEncrypt(byteKey);\n    }\n  };\n  const handleEncrypt = (encryptionKey) => {\n    let aes, rsa;\n    props.encType === 0 ? (aes = encryptionKey) : (rsa = encryptionKey);\n\n    if (inputTypeSelect === \"text\") {\n      props.handleEncrypt(aes, rsa, textInput, \"txt\", false);\n    } else {\n      props.handleEncrypt(aes, rsa, uploadedFile, fileMetaData.ext, true);\n    }\n  };\n\n  return (\n    <form onSubmit={(e) => handleFormSubmit(e)}>\n      <div className={classes.main}>\n        <Box pt={2} pb={2}>\n          To Encrypt, simply fill out this form.<br/>\n          {props.encType === 0 && <b>Just don't lose your Passphrase!</b>}\n        </Box>\n        <Box mb={2}>\n          <FormControl component=\"fieldset\">\n            <RadioGroup\n              row\n              aria-label=\"position\"\n              name=\"position\"\n              value={inputTypeSelect}\n              defaultValue=\"top\"\n              onChange={handleInputType}\n            >\n              <FormControlLabel\n                value=\"byte\"\n                control={<Radio color=\"secondary\" />}\n                label=\"Load my secret\"\n                labelPlacement=\"end\"\n              />\n              <FormControlLabel\n                value=\"text\"\n                control={<Radio color=\"primary\" />}\n                label=\"Type my secret\"\n                labelPlacement=\"end\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </Box>\n\n        <Box>{inputType}</Box>\n      </div>\n      {props.encType === 0 ? (\n        <PassPhrase\n          mainButtonText={\"Encrypt\"}\n          modalButtonText={\"Submit\"}\n          handleSubmit={handleFormSubmit}\n          handleConfirm={handleEncrypt}\n          loading={props.loader}\n        />\n      ) : (\n        <KeyInput\n          loading={props.loader}\n          privateKey={false}\n          encrypt={true}\n          handleKeyEncrypt={handleKeyEncrypt}\n        />\n      )}\n    </form>\n  );\n};\n\nexport default EncryptForm;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Result from \"./EncResult\";\nimport EncTypeTab from \"../utils/EncTypeTab\";\nimport EncryptForm from \"./EncryptForm\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { resetAlert, encSuccess, encError } from \"../utils/utils\";\nimport { snackLocation } from \"../utils/config\";\n\nconst openpgp = require(\"openpgp\");\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    \"& > * + *\": {\n      marginLeft: theme.spacing(2),\n    },\n  },\n  header: {\n    paddingRight: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      paddingRight: theme.spacing(2),\n      paddingLeft: theme.spacing(2),\n    },\n  },\n}));\n\nconst Encrypt = () => {\n  const classes = useStyles();\n  const [success, setSuccess] = useState(false);\n  const [loader, setLoader] = useState(false);\n  const [encType, setEncType] = useState(0);\n  const [alert, setAlert] = useState(resetAlert);\n  const [armorTxt, setArmorTxt] = useState();\n\n  const byteEncrypt = async (passPhrase, pubKey, uploadedFile, ext, binInd) => {\n    try {\n      setLoader(true);\n\n      let inputMessage = binInd\n        ? openpgp.message.fromBinary(uploadedFile)\n        : openpgp.message.fromText(uploadedFile);\n\n      let encIn = {\n        message: inputMessage,\n        armor: false,\n      };\n\n      pubKey ? (encIn.publicKeys = pubKey) : (encIn.passwords = [passPhrase]);\n\n      const { message } = await openpgp.encrypt(encIn);\n      binInd && message.packets.write();\n\n      setArmorTxt({ armorTxt: message.armor(), ext: ext });\n      outputHandler();\n    } catch (e) {\n      setAlert(encError);\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setAlert(resetAlert);\n  };\n\n  const outputHandler = () => {\n    setAlert(encSuccess);\n    setSuccess(true);\n    setLoader(false);\n  };\n\n  const reset = () => {\n    setSuccess(false);\n    setAlert(resetAlert);\n  };\n\n  const handleEncType = (type) => {\n    setEncType(type);\n  };\n\n  let form = (\n    <EncryptForm\n      handleEncrypt={byteEncrypt}\n      encType={encType}\n      loader={loader}\n    />\n  );\n\n  return (\n    <div>\n      {alert.show && (\n        <Snackbar\n          anchorOrigin={snackLocation}\n          open={alert.show}\n          autoHideDuration={10000}\n          onClose={handleClose}\n        >\n          <Alert onClose={handleClose} severity={alert.severity}>\n            {alert.message}\n          </Alert>\n        </Snackbar>\n      )}\n      <Box p={2}>\n        <div className={classes.header}>\n          {!success && <EncTypeTab handleType={handleEncType} />}\n\n          <Typography className={classes.heading} variant=\"h5\" gutterBottom>\n            {encType === 0 ? (\n              <b>Passphrase Encryption</b>\n            ) : (\n              <b>Key Encryption</b>\n            )}\n          </Typography>\n        </div>\n        {success ? <Result reset={reset} armorTxt={armorTxt} /> : form}\n      </Box>\n    </div>\n  );\n};\n\nexport default Encrypt;\n"],"sourceRoot":""}