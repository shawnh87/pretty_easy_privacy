{"version":3,"sources":["components/utils/utils.js","components/shared/BrowserResult.js","components/utils/config.js","components/shared/InFile.js","components/shared/EncTypeTab.js","components/shared/Passphrase.js","components/shared/KeyInput.js","components/encrypt/EncResult.js","components/encrypt/EncryptForm.js","components/encrypt/Encrypt.js"],"names":["FileType","require","mimes","txt","csv","html","css","extSelect","decrypted","decType","a","fileType","fromBuffer","bufferType","ext","decFormat","show","severity","message","decGeneric","decPW","decSuccess","encSuccess","encError","resetAlert","keyError","privKeyPassError","pubKeyDecError","useStyles","makeStyles","theme","result","maxHeight","maxWidth","overflowY","button","margin","copy","textAlign","Display","props","classes","useState","open","vertical","horizontal","openSnack","setOpenSnack","inputId","id","keyIn","val","className","title","aria-label","onClick","copyText","document","getElementById","textContent","textArea","createElement","setAttribute","body","append","select","setSelectionRange","execCommand","remove","anchorOrigin","onClose","key","snackLocation","hidden","visibility","width","buttonProgress","position","top","left","marginTop","marginLeft","helpText","spacing","InFile","hiddenId","inId","selectedFile","fileMetaData","name","handleDelete","click","variant","color","disabled","uploading","size","label","type","onChange","readFile","formByteInputError","error","errMessage","AntTabs","withStyles","root","borderBottom","indicator","backgroundColor","Tabs","AntTab","textTransform","minWidth","fontWeight","typography","fontWeightRegular","marginRight","fontFamily","join","opacity","fontWeightMedium","selected","disableRipple","flexGrow","padding","demo1","palette","background","paper","demo2","EncTypeTab","React","value","setValue","event","newValue","handleType","pwInput","pw","main","breakpoints","up","PassPhraseConfirm","confirmPassPhrase","setConfirmPassPhrase","status","confirmError","handleClose","aria-labelledby","required","autoFocus","e","target","fullWidth","handleConfirm","buttonText","PassPhrase","passPhrase","passPhraseState","passPhraseMissingError","errors","setErrors","setOpen","score","resp","strength","setStrength","strengthResp","0","1","2","3","4","container","item","helperText","zxcvbn","class","length","pt","loading","preventDefault","err","handleSubmit","mainButtonText","modalButtonText","KeyInput","inputType","privateKey","encrypt","resetErr","alert","setAlert","byteKey","setByteKey","inputTypeSelect","setInputTypeSelect","formTextInputError","setFormTextInputError","setFormByteInputError","setFileMetaData","passPhraseError","setPassPhraseError","setPassPhrase","setUploading","reason","textBox","multiline","rows","buttonLabel","undefined","console","log","file","files","reader","FileReader","readAsText","onloadend","replace","onerror","handlePrivateKey","outkey","handlePublicKey","handleKeyEncrypt","readArmored","rsaKey","keys","decrypt","output","autoHideDuration","gutterBottom","component","row","defaultValue","control","labelPlacement","mt","height","Result","openEnc","setOpenEnc","armorTxt","disableCopy","Box","Typography","mb","pr","Button","textVal","element","Blob","href","URL","createObjectURL","download","split","outputHandler","reset","paddingLeft","paddingRight","paddingBottom","EncryptForm","textInput","textInputState","uploadedFile","setUploadedFile","TextField","readAsArrayBuffer","Uint8Array","handleFormSubmit","handleEncrypt","encryptionKey","aes","rsa","encType","onSubmit","pb","FormControl","RadioGroup","FormControlLabel","Radio","loader","keyErr","display","header","Encrypt","success","setSuccess","setLoader","setEncType","setArmorTxt","byteEncrypt","pubKey","binInd","inputMessage","pgpMessage","fromBinary","fromText","encIn","armor","publicKeys","passwords","packets","write","form","Snackbar","Alert","p","heading"],"mappings":"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","file":"static/js/7.247bdb7a.chunk.js","sourcesContent":["const FileType = require(\"file-type\");\n\nexport const mimes = {\n  txt: \"text/plain\",\n  csv: \"text/csv\",\n  html: \"text/html\",\n  css: \"text/css\",\n};\n\nexport const extSelect = async (decrypted, decType) => {\n  let bufferType;\n  if (decType.fileType === \"byte\") {\n    bufferType = await FileType.fromBuffer(decrypted);\n  }\n\n  if (bufferType) {\n    return bufferType.ext;\n  } else if (decType.fileType === \"text\") {\n    return decType.ext;\n  } else {\n    return \"txt\";\n  }\n};\n\nexport const decFormat = {\n  show: true,\n  severity: \"error\",\n  message:\n    \"Looks like there is a format issue with your Encrypted text. We recommend using the original text file supplied!\",\n};\n\nexport const decGeneric = {\n  show: true,\n  severity: \"error\",\n  message: \"Something went wrong! Please try again.\",\n};\n\nexport const decPW = {\n  show: true,\n  severity: \"error\",\n  message: \"Passphrase is incorrect!\",\n};\n\nexport const decSuccess = {\n  show: true,\n  severity: \"success\",\n  message: \"Successfully decrypted!\",\n};\n\nexport const encSuccess = {\n  show: true,\n  message: \"Encryption Complete\",\n  severity: \"success\",\n};\n\nexport const encError = {\n  show: true,\n  message: \"Something went wrong! Please try again.\",\n  severity: \"error\",\n};\n\nexport const resetAlert = {\n  show: false,\n  message: \"\",\n  severity: \"\",\n};\n\nexport const keyError = {\n  show: true,\n  message: \"Invalid RSA Key! Please try again.\",\n  severity: \"error\",\n};\n\nexport const privKeyPassError = {\n  show: true,\n  message: \"Incorrect Passphrase! Please try again.\",\n  severity: \"error\",\n};\n\nexport const pubKeyDecError = {\n  show: true,\n  message: \"A Public Key has been supplied. Please provide your Private Key!\",\n  severity: \"error\",\n};","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\nimport { Tooltip, Paper, Snackbar } from \"@material-ui/core\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  result: {\n    maxHeight: \"400px\",\n    maxWidth: \"400px\",\n    overflowY: \"scroll\",\n  },\n  button: {\n    margin: \"5px\",\n  },\n  copy: {\n    textAlign: \"right\",\n    maxWidth: \"400px\",\n  },\n}));\n\nconst Display = (props) => {\n  const classes = useStyles();\n  const [openSnack, setOpenSnack] = useState({\n    open: false,\n    vertical: \"bottom\",\n    horizontal: \"left\",\n  });\n\n  const { vertical, horizontal, open } = openSnack;\n\n  let inputId = props.id;\n  let keyIn = props.val;\n\n  const handleCopy = () => {\n    setOpenSnack({ ...openSnack, open: true });\n    let copyText = document.getElementById(inputId).textContent;\n    const textArea = document.createElement(\"textarea\");\n    textArea.setAttribute(\"id\", \"copy\");\n    textArea.textContent = copyText;\n    document.body.append(textArea);\n    textArea.select();\n    textArea.setSelectionRange(0, 99999); /*For mobile devices*/\n\n    /* Copy the text inside the text field */\n    document.execCommand(\"copy\");\n    textArea.remove();\n  };\n\n  const handleClose = () => {\n    setOpenSnack({ ...openSnack, open: false });\n  };\n  return (\n    <>\n      <div className={classes.copy}>\n        <Tooltip title=\"Copy\">\n          <IconButton aria-label=\"Copy\" onClick={handleCopy}>\n            <FileCopyIcon />\n          </IconButton>\n        </Tooltip>\n      </div>\n      <Paper className={classes.result}>\n        <pre id={inputId}>{keyIn}</pre>\n      </Paper>\n\n      <Snackbar\n        anchorOrigin={{ vertical, horizontal }}\n        open={open}\n        onClose={handleClose}\n        message=\"Copied to clipboard\"\n        key={vertical + horizontal}\n      />\n    </>\n  );\n};\n\nexport default Display;\n","export const snackLocation = { vertical: \"bottom\", horizontal: \"left\" };\n\nexport const menuOptions = {\n  1: \"ENCRYPT\",\n  2: \"DECRYPT\",\n  3: \"KEY CREATION\",\n  4: \"ABOUT\",\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DeleteOutlineSharpIcon from \"@material-ui/icons/DeleteOutlineSharp\";\nimport {\n  Button,\n  Box,\n  IconButton,\n  FormLabel,\n  FormHelperText,\n  CircularProgress,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  hidden: {\n    visibility: \"hidden\",\n    width: \"1px\",\n  },\n  buttonProgress: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n  helpText: {\n    marginLeft: theme.spacing(2),\n  },\n}));\n\nconst InFile = (props) => {\n  const classes = useStyles();\n\n  let hiddenId = props.inId;\n\n  const selectedFile = props.fileMetaData && (\n    <div>\n      <FormLabel>{`Selected: ${props.fileMetaData.name}`}</FormLabel>\n      <IconButton onClick={props.handleDelete}>\n        <DeleteOutlineSharpIcon />\n      </IconButton>\n    </div>\n  );\n  return (\n    <Box>\n      <Button\n        onClick={() => document.getElementById(hiddenId).click()}\n        variant=\"outlined\"\n        color=\"secondary\"\n        disabled={props.uploading}\n      >\n        {props.uploading && (\n          <CircularProgress\n            size={24}\n            color=\"secondary\"\n            className={classes.buttonProgress}\n          />\n        )}\n        {props.label}\n      </Button>\n\n      <input\n        id={hiddenId}\n        type=\"file\"\n        className={classes.hidden}\n        onChange={props.readFile}\n      />\n      {selectedFile}\n      {props.formByteInputError && (\n        <div className={classes.helpText}>\n          <FormHelperText error={true}>\n            {props.errMessage ? props.errMessage : \"File Required\"}\n          </FormHelperText>\n        </div>\n      )}\n    </Box>\n  );\n};\n\nexport default InFile;\n","import React from \"react\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport { Tabs, Tab, Typography } from \"@material-ui/core\";\n\nconst AntTabs = withStyles({\n  root: {\n    borderBottom: \"1px solid #e8e8e8\",\n  },\n  indicator: {\n    backgroundColor: \"#1de9b6\",\n  },\n})(Tabs);\n\nconst AntTab = withStyles((theme) => ({\n  root: {\n    textTransform: \"none\",\n    minWidth: 72,\n    fontWeight: theme.typography.fontWeightRegular,\n    marginRight: theme.spacing(4),\n    fontFamily: [\n      \"-apple-system\",\n      \"BlinkMacSystemFont\",\n      '\"Segoe UI\"',\n      \"Roboto\",\n      '\"Helvetica Neue\"',\n      \"Arial\",\n      \"sans-serif\",\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(\",\"),\n    \"&:hover\": {\n      color: \"#4aedc4\",\n      opacity: 1,\n    },\n    \"&$selected\": {\n      color: \"#1de9b6\",\n      fontWeight: theme.typography.fontWeightMedium,\n    },\n    \"&:focus\": {\n      color: \"#1de9b6\",\n    },\n  },\n  selected: {},\n}))((props) => <Tab disableRipple {...props} />);\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  padding: {\n    padding: theme.spacing(2),\n  },\n  demo1: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  demo2: {\n    backgroundColor: \"#2e1534\",\n  },\n}));\n\nexport default function EncTypeTab(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n    props.handleType(newValue);\n  };\n  return (\n    <div className={classes.root}>\n      <AntTabs value={value} onChange={handleChange} aria-label=\"ant example\">\n        <AntTab label=\"Passphrase (Symmetric)\" />\n        <AntTab label=\"Key Pair (Asymmetric)\" />\n      </AntTabs>\n      <Typography className={classes.padding} />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport zxcvbn from \"zxcvbn\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  TextField,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Button,\n  Box,\n  Grid,\n  CircularProgress,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  pwInput: {\n    width: \"225px\",\n  },\n  pw: {\n    color: \"#777fa7\",\n    marginTop: \"18px\",\n  },\n  buttonProgress: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n  main: {\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      padding: theme.spacing(2),\n    },\n  },\n}));\n\nconst PassPhraseConfirm = (props) => {\n  const [confirmPassPhrase, setConfirmPassPhrase] = useState();\n\n  const passPhraseConfirmBuffer = (e) => {\n    setConfirmPassPhrase(e.target.value);\n  };\n\n  const status = props.open;\n\n  const label = props.confirmError\n    ? \"Please Try Again\"\n    : \"Passphrase Confirmation\";\n\n  return (\n    <div>\n      <Dialog\n        open={status}\n        onClose={props.handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">\n          Passphrase Confirmation\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please re enter your passphrase below:\n          </DialogContentText>\n          <TextField\n            required\n            autoFocus\n            error={props.confirmError}\n            onChange={passPhraseConfirmBuffer}\n            margin=\"dense\"\n            id=\"name\"\n            label={label}\n            type=\"password\"\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            onClick={() => props.handleConfirm(confirmPassPhrase)}\n            color=\"primary\"\n          >\n            {props.buttonText}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nconst PassPhrase = (props) => {\n  const classes = useStyles();\n\n  const [passPhrase, passPhraseState] = useState(\"\");\n  const [errors, setErrors] = useState({\n    confirmError: false,\n    passPhraseMissingError: false,\n  });\n  const [open, setOpen] = useState(false);\n  const [strength, setStrength] = useState({ score: null, resp: null });\n\n  let strengthResp = {\n    0: \"Very Bad 👎\",\n    1: \"Bad 👎\",\n    2: \"Weak 😐\",\n    3: \"Good 🙂\",\n    4: \"Strong 🔥🔥🔥\",\n  };\n\n  const handlePassPhrase = (e) => {\n    passPhraseState(e.target.value);\n    const result = zxcvbn(e.target.value);\n    setStrength({\n      score: result.score === 0 ? \"1\" : result.score,\n      resp: strengthResp[result.score],\n    });\n  };\n\n  let handleSubmit = (e) => {\n    e.preventDefault();\n    setErrors({ confirmError: false, passPhraseMissingError: false });\n    const err = props.handleSubmit(e);\n\n    if (!passPhrase) {\n      setErrors({ ...errors, passPhraseMissingError: true });\n    }\n    if (!passPhrase || err) {\n      return;\n    } else {\n      setOpen(true);\n    }\n  };\n\n  const handleConfirm = (confirmPassPhrase) => {\n    if (confirmPassPhrase === passPhrase) {\n      setOpen(false);\n      props.handleConfirm(passPhrase);\n    } else {\n      setErrors({ ...errors, confirmError: true });\n    }\n  };\n\n  return (\n    <div className={classes.main}>\n      <Box>\n        <Grid container spacing={1}>\n          <Grid item>\n            <TextField\n              required\n              helperText={\n                errors.passPhraseMissingError && \"PassPhrase Required!\"\n              }\n              onChange={handlePassPhrase}\n              className={props.class}\n              error={errors.passPhraseMissingError}\n              id=\"pw-in\"\n              type=\"password\"\n              label={\"PassPhrase\"}\n              variant=\"outlined\"\n            />\n          </Grid>\n          {passPhrase.length > 0 && (\n            <Grid className={classes.pw} item>\n              {strength.resp}\n            </Grid>\n          )}\n        </Grid>\n      </Box>\n\n      <Box pt={3}>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color={\"primary\"}\n          disabled={props.loading}\n          onClick={handleSubmit}\n        >\n          {props.mainButtonText}\n          {props.loading && (\n            <CircularProgress\n              size={24}\n              color=\"primary\"\n              className={classes.buttonProgress}\n            />\n          )}\n        </Button>\n      </Box>\n\n      <PassPhraseConfirm\n        open={open}\n        buttonText={props.modalButtonText}\n        handleClose={() => setOpen(false)}\n        handleConfirm={handleConfirm}\n        confirmError={errors.confirmError}\n      />\n    </div>\n  );\n};\n\nexport default PassPhrase;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { snackLocation } from \"../utils/config\";\nimport InFile from \"./InFile\";\nimport { resetAlert, keyError, privKeyPassError, pubKeyDecError } from \"../utils/utils\";\nimport { key } from \"openpgp\";\nimport {\n  TextField,\n  Button,\n  Box,\n  Radio,\n  RadioGroup,\n  FormControlLabel,\n  FormControl,\n  FormLabel,\n  Snackbar,\n  CircularProgress,\n  Typography,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  buttonProgress: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n\n  main: {\n    backgroundColor: \"#FAFAFA\",\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      padding: theme.spacing(2),\n    },\n  },\n}));\n\nconst KeyInput = (props) => {\n  const classes = useStyles();\n\n  let privateKey = props.privateKey;\n  let encrypt = props.encrypt;\n\n  let resetErr = { err: false, key: false, message: false };\n\n  const [alert, setAlert] = useState(resetAlert);\n  const [byteKey, setByteKey] = useState();\n  const [inputTypeSelect, setInputTypeSelect] = useState(\"byte\");\n  const [formTextInputError, setFormTextInputError] = useState(resetErr);\n  const [formByteInputError, setFormByteInputError] = useState(resetErr);\n  const [fileMetaData, setFileMetaData] = useState();\n  const [passPhraseError, setPassPhraseError] = useState(false);\n  const [passPhrase, setPassPhrase] = useState(\"\");\n  const [uploading, setUploading] = useState(false);\n\n  const handlePassPhrase = (e) => setPassPhrase(e.target.value);\n\n  const handleDelete = () => {\n    setByteKey(undefined);\n    setFileMetaData(undefined);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setAlert(resetAlert);\n  };\n\n  const handleTextInput = (e) => {\n    setByteKey(e.target.value);\n  };\n\n  const handleInputType = (e) => {\n    setInputTypeSelect(e.target.value);\n  };\n\n  const readKey = (e) => {\n    console.log(\"FIRE\");\n    var file = e.target.files[0];\n    if (!file) return;\n    var reader = new FileReader();\n    setUploading(true);\n\n    reader.readAsText(file);\n\n    reader.onloadend = () => {\n      setFileMetaData({ name: file.name, type: file.type.replace(\"/\", \"_\") });\n      setByteKey(reader.result);\n      setUploading(false);\n    };\n    reader.onerror = () => {\n      setByteKey(undefined);\n      setUploading(false);\n    };\n  };\n\n  let inputType;\n  if (inputTypeSelect === \"text\") {\n    inputType = (\n      <TextField\n        helperText={formTextInputError.err && formTextInputError.message}\n        className={classes.textBox}\n        fullWidth={true}\n        error={formTextInputError.err}\n        id=\"outlined-multiline-static-rsa-key\"\n        label={\"RSA Key Input\"}\n        multiline\n        rows={10}\n        onChange={handleTextInput}\n        variant=\"outlined\"\n      />\n    );\n  } else {\n    inputType = (\n      <InFile\n        formByteInputError={formByteInputError.err}\n        errMessage={formByteInputError.err.message}\n        fileMetaData={fileMetaData}\n        label=\"Key Browse\"\n        buttonLabel={\"key browse\"}\n        handleDelete={handleDelete}\n        readFile={readKey}\n        uploading={uploading}\n        inId=\"keyIn\"\n      />\n    );\n  }\n\n  const removeErrors = () => {\n    setAlert(resetAlert);\n    setFormTextInputError(resetErr);\n    setFormByteInputError(resetErr);\n    setPassPhraseError(false);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    removeErrors();\n\n    let err = false,\n      outkey;\n\n    if (passPhrase === \"\") {\n      setPassPhraseError(true);\n      err = true;\n    }\n\n    if (!byteKey || byteKey === \"\") {\n      if (inputTypeSelect === \"text\") {\n        setFormTextInputError({\n          ...formTextInputError,\n          err: true,\n          message: \"Key Text Required\",\n        });\n      } else {\n        setFormByteInputError({\n          ...formByteInputError,\n          err: true,\n          message: \"Key File Required\",\n        });\n      }\n      err = true;\n    } else {\n      privateKey\n        ? ({ key: outkey, error: err } = await handlePrivateKey(\n            byteKey,\n            passPhrase\n          ))\n        : ({ key: outkey, error: err } = await handlePublicKey(byteKey));\n    }\n\n    //continue to snag error in other input\n\n    props.handleKeyEncrypt(outkey, err);\n  };\n\n  const handlePublicKey = async (byteKey) => {\n    let rsaKey = (await key.readArmored(byteKey)).keys[0];\n    if (!rsaKey) {\n      setAlert(keyError);\n      return { key: undefined, error: true };\n    } else {\n      return { key: rsaKey, error: false };\n    }\n  };\n\n  const handlePrivateKey = async (byteKey, passPhrase) => {\n    let output;\n    try {\n      const {\n        keys: [privateKey],\n      } = await key.readArmored(byteKey);\n      await privateKey.decrypt(passPhrase);\n      output = [privateKey];\n      return { key: output, error: false };\n    } catch (e) {\n      e.message === \"Nothing to decrypt in a public key\" &&\n        setAlert(pubKeyDecError);\n      e.message === \"Incorrect key passphrase\" && setAlert(privKeyPassError);\n      e.message === \"privateKey is undefined\" && setAlert(keyError);\n      e.message === \"Cannot read property 'decrypt' of undefined\" &&\n        setAlert(keyError);\n      return { key: undefined, error: true };\n    }\n  };\n\n  return (\n    <div className={classes.main}>\n      {alert.show && (\n        <Snackbar\n          anchorOrigin={snackLocation}\n          open={alert.show}\n          autoHideDuration={10000}\n          onClose={handleClose}\n        >\n          <Alert onClose={handleClose} severity={alert.severity}>\n            {alert.message}\n          </Alert>\n        </Snackbar>\n      )}\n      <Box>\n        <Box>\n          <Typography color=\"textPrimary\" variant=\"h6\" gutterBottom>\n            <b>Key Input</b>\n          </Typography>\n          <FormControl component=\"fieldset\">\n            <RadioGroup\n              row\n              aria-label=\"position\"\n              name=\"position\"\n              value={inputTypeSelect}\n              defaultValue=\"top\"\n              onChange={handleInputType}\n            >\n              <FormControlLabel\n                value=\"byte\"\n                control={<Radio color=\"secondary\" />}\n                label=\"Import from file\"\n                labelPlacement=\"end\"\n              />\n              <FormControlLabel\n                value=\"text\"\n                control={<Radio color=\"primary\" />}\n                label=\"Paste in text\"\n                labelPlacement=\"end\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </Box>\n        <Box>\n          <FormLabel component=\"legend\"></FormLabel>\n          <Box mt={3}>{inputType}</Box>\n        </Box>\n        {privateKey && (\n          <Box pt={3}>\n            <TextField\n              required\n              helperText={passPhraseError && \"Passphrase Required!\"}\n              onChange={handlePassPhrase}\n              error={passPhraseError}\n              id=\"pw-in private key\"\n              type=\"password\"\n              label={\"Private Key Passphrase\"}\n              variant=\"outlined\"\n            />\n          </Box>\n        )}\n        <Box pt={3}>\n          <Button\n            variant=\"contained\"\n            color={\"primary\"}\n            onClick={handleSubmit}\n            disabled={props.loading}\n          >\n            {encrypt ? \"Encrypt\" : \"Decrypt\"}\n            {props.loading && (\n              <CircularProgress\n                size={24}\n                color=\"primary\"\n                className={classes.buttonProgress}\n              />\n            )}\n          </Button>\n        </Box>\n      </Box>\n    </div>\n  );\n};\n\nexport default KeyInput;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Box, Typography } from \"@material-ui/core\";\nimport Display from \"../shared/BrowserResult\";\n\nconst useStyles = makeStyles((theme) => ({\n  main: {\n    padding: theme.spacing(2),\n\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      padding: theme.spacing(2),\n    },\n  },\n\n  result: {\n    maxHeight: \"100px\",\n    maxWidth: \"350px\",\n    overflowY: \"scroll\",\n  },\n  paper: {\n    height: \"100px\",\n    width: \"350px\",\n  },\n  button: {\n    margin: \"5px\",\n  },\n}));\n\nconst Result = (props) => {\n  const classes = useStyles();\n\n  const [openEnc, setOpenEnc] = useState(false);\n\n  let armorTxt = props.armorTxt;\n  let disableCopy = armorTxt.armorTxt.length > 10000;\n\n  const outputHandler = (textVal) => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([textVal.armorTxt], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = `${element.href.split(\"/\")[3]}.aes\"`;\n    element.click();\n    element.remove();\n  };\n\n  return (\n    <div className={classes.main}>\n      <Box pt={2}>\n        <Typography variant=\"h6\" gutterBottom>\n          Encrypted Data:\n        </Typography>\n        <Box>\n          Here are your results.\n          <br />\n          We recommend downloading the file.\n          <br />\n          Don't worry, if you prefer working with text yourself, we provide that\n          too. <br />\n          <br />\n        </Box>\n        <Box mb={2} pr={4}>\n          <Button\n            disabled={disableCopy}\n            onClick={() => setOpenEnc(!openEnc)}\n            variant=\"outlined\"\n            color={\"secondary\"}\n            className={classes.button}\n          >\n            {!openEnc ? \"In Browser\" : \"Hide\"}\n          </Button>\n\n          <Button\n            onClick={() => outputHandler(armorTxt)}\n            variant=\"outlined\"\n            color={\"secondary\"}\n            className={classes.button}\n          >\n            Download\n          </Button>\n          {openEnc && <Display val={armorTxt.armorTxt} id=\"encryptedResult\" />}\n        </Box>\n        <Box>\n          <Button\n            onClick={props.reset}\n            variant=\"contained\"\n            className={classes.button}\n            color={\"primary\"}\n          >\n            {\" \"}\n            New Encryption{\" \"}\n          </Button>\n        </Box>\n      </Box>\n    </div>\n  );\n};\n\nexport default Result;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PassPhrase from \"../shared/Passphrase\";\nimport KeyInput from \"../shared/KeyInput\";\nimport InFile from \"../shared/InFile\";\nimport {\n  TextField,\n  Box,\n  Radio,\n  RadioGroup,\n  FormControlLabel,\n  FormControl,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  textBox: {\n    maxWidth: \"700px\",\n  },\n  main: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n  },\n}));\n\nconst EncryptForm = (props) => {\n  const classes = useStyles();\n\n  const [inputTypeSelect, setInputTypeSelect] = useState(\"byte\");\n  const [textInput, textInputState] = useState(\"\");\n  const [formTextInputError, setFormTextInputError] = useState(false);\n  const [formByteInputError, setFormByteInputError] = useState(false);\n  const [uploadedFile, setUploadedFile] = useState();\n  const [fileMetaData, setFileMetaData] = useState();\n  const [uploading, setUploading] = useState(false);\n\n  const readFile = (e) => {\n    var file = e.target.files[0];\n    if (!file) return;\n    var reader = new FileReader();\n    reader.readAsArrayBuffer(file);\n    setUploading(true);\n\n    reader.onloadend = () => {\n      setUploadedFile(new Uint8Array(reader.result));\n      setFileMetaData({ name: file.name, type: file.type.replace(\"/\", \"_\") });\n      setUploading(false);\n    };\n\n    reader.onerror = () => {\n      setUploading(false);\n      setUploadedFile(undefined);\n    };\n  };\n\n  const handleDelete = () => {\n    setUploadedFile(undefined);\n    setFileMetaData(undefined);\n  };\n\n  const handleTextInput = (e) => {\n    textInputState(e.target.value);\n  };\n\n  const handleInputType = (e) => {\n    setFormTextInputError(false);\n    setFormByteInputError(false);\n    setInputTypeSelect(e.target.value);\n  };\n\n  let inputType;\n  if (inputTypeSelect === \"text\") {\n    inputType = (\n      <TextField\n        helperText={formTextInputError && \"Please Select a file object!\"}\n        className={classes.textBox}\n        fullWidth={true}\n        error={formTextInputError}\n        id=\"outlined-multiline-static\"\n        label=\"Text to Encrypt\"\n        multiline\n        rows={10}\n        onChange={handleTextInput}\n        variant=\"outlined\"\n      />\n    );\n  } else {\n    inputType = (\n      <InFile\n        fileMetaData={fileMetaData}\n        formByteInputError={formByteInputError}\n        readFile={readFile}\n        handleDelete={handleDelete}\n        label=\"Browse for File\"\n        uploading={uploading}\n        inId=\"encIn\"\n      />\n    );\n  }\n\n  const handleFormSubmit = () => {\n    setFormTextInputError(false);\n    setFormByteInputError(false);\n\n    if (inputTypeSelect === \"text\" && (!textInput || textInput === \"\")) {\n      setFormTextInputError(true);\n      return true;\n    } else if (inputTypeSelect === \"byte\" && !uploadedFile) {\n      setFormByteInputError(true);\n      return true;\n    }\n    return false;\n  };\n\n  const handleKeyEncrypt = (byteKey, keyErr) => {\n    let errCheck = handleFormSubmit();\n    if (!errCheck && !keyErr) {\n      handleEncrypt(byteKey);\n    }\n  };\n  const handleEncrypt = (encryptionKey) => {\n    let aes, rsa;\n    props.encType === 0 ? (aes = encryptionKey) : (rsa = encryptionKey);\n\n    if (inputTypeSelect === \"text\") {\n      props.handleEncrypt(aes, rsa, textInput, \"txt\", false);\n    } else {\n      props.handleEncrypt(aes, rsa, uploadedFile, fileMetaData.ext, true);\n    }\n  };\n\n  return (\n    <form onSubmit={(e) => handleFormSubmit(e)}>\n      <div className={classes.main}>\n        <Box pt={2} pb={2}>\n          To Encrypt, simply fill out this form.\n          <br />\n          {props.encType === 0 && <b>Just don't lose your Passphrase!</b>}\n        </Box>\n        <Box mb={2}>\n          <FormControl component=\"fieldset\">\n            <RadioGroup\n              row\n              aria-label=\"position\"\n              name=\"position\"\n              value={inputTypeSelect}\n              defaultValue=\"top\"\n              onChange={handleInputType}\n            >\n              <FormControlLabel\n                value=\"byte\"\n                control={<Radio color=\"secondary\" />}\n                label=\"Load my secret\"\n                labelPlacement=\"end\"\n              />\n              <FormControlLabel\n                value=\"text\"\n                control={<Radio color=\"primary\" />}\n                label=\"Type my secret\"\n                labelPlacement=\"end\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </Box>\n\n        <Box>{inputType}</Box>\n      </div>\n      {props.encType === 0 ? (\n        <PassPhrase\n          mainButtonText={\"Encrypt\"}\n          modalButtonText={\"Submit\"}\n          handleSubmit={handleFormSubmit}\n          handleConfirm={handleEncrypt}\n          loading={props.loader}\n        />\n      ) : (\n        <KeyInput\n          loading={props.loader}\n          privateKey={false}\n          encrypt={true}\n          handleKeyEncrypt={handleKeyEncrypt}\n        />\n      )}\n    </form>\n  );\n};\n\nexport default EncryptForm;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Result from \"./EncResult\";\nimport EncTypeTab from \"../shared/EncTypeTab\";\nimport EncryptForm from \"./EncryptForm\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { resetAlert, encSuccess, encError } from \"../utils/utils\";\nimport { snackLocation } from \"../utils/config\";\nimport { Box, Typography, Snackbar } from \"@material-ui/core\";\nimport { message as pgpMessage, encrypt } from \"openpgp\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    \"& > * + *\": {\n      marginLeft: theme.spacing(2),\n    },\n  },\n  header: {\n    paddingRight: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      paddingRight: theme.spacing(2),\n      paddingLeft: theme.spacing(2),\n    },\n  },\n}));\n\nconst Encrypt = () => {\n  const classes = useStyles();\n  const [success, setSuccess] = useState(false);\n  const [loader, setLoader] = useState(false);\n  const [encType, setEncType] = useState(0);\n  const [alert, setAlert] = useState(resetAlert);\n  const [armorTxt, setArmorTxt] = useState();\n\n  const byteEncrypt = async (passPhrase, pubKey, uploadedFile, ext, binInd) => {\n    try {\n      setLoader(true);\n\n      let inputMessage = binInd\n        ? pgpMessage.fromBinary(uploadedFile)\n        : pgpMessage.fromText(uploadedFile);\n\n      let encIn = {\n        message: inputMessage,\n        armor: false,\n      };\n\n      pubKey ? (encIn.publicKeys = pubKey) : (encIn.passwords = [passPhrase]);\n\n      const { message } = await encrypt(encIn);\n      binInd && message.packets.write();\n\n      setArmorTxt({ armorTxt: message.armor(), ext: ext });\n      outputHandler();\n    } catch (e) {\n      setAlert(encError);\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setAlert(resetAlert);\n  };\n\n  const outputHandler = () => {\n    setAlert(encSuccess);\n    setSuccess(true);\n    setLoader(false);\n  };\n\n  const reset = () => {\n    setSuccess(false);\n    setAlert(resetAlert);\n  };\n\n  const handleEncType = (type) => {\n    setEncType(type);\n  };\n\n  let form = (\n    <EncryptForm\n      handleEncrypt={byteEncrypt}\n      encType={encType}\n      loader={loader}\n    />\n  );\n\n  return (\n    <div>\n      {alert.show && (\n        <Snackbar\n          anchorOrigin={snackLocation}\n          open={alert.show}\n          autoHideDuration={10000}\n          onClose={handleClose}\n        >\n          <Alert onClose={handleClose} severity={alert.severity}>\n            {alert.message}\n          </Alert>\n        </Snackbar>\n      )}\n      <Box p={2}>\n        <div className={classes.header}>\n          {!success && <EncTypeTab handleType={handleEncType} />}\n\n          <Typography className={classes.heading} variant=\"h5\" gutterBottom>\n            {encType === 0 ? (\n              <b>Passphrase Encryption</b>\n            ) : (\n              <b>Key Encryption</b>\n            )}\n          </Typography>\n        </div>\n        {success ? <Result reset={reset} armorTxt={armorTxt} /> : form}\n      </Box>\n    </div>\n  );\n};\n\nexport default Encrypt;\n"],"sourceRoot":""}