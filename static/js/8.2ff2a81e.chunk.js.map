{"version":3,"sources":["components/utils/BrowserResult.js","components/utils/Passphrase.js","components/key_gen/KeyGen.js"],"names":["useStyles","makeStyles","theme","result","maxHeight","maxWidth","overflowY","button","margin","copy","marginLeft","Display","props","classes","useState","open","vertical","horizontal","openSnack","setOpenSnack","inputId","id","keyIn","val","className","title","aria-label","onClick","copyText","document","getElementById","textContent","textArea","createElement","setAttribute","body","append","select","setSelectionRange","execCommand","remove","anchorOrigin","onClose","message","key","pwInput","width","pw","color","marginTop","buttonProgress","position","top","left","main","padding","spacing","breakpoints","up","PassPhraseConfirm","confirmPassPhrase","setConfirmPassPhrase","status","label","confirmError","handleClose","aria-labelledby","required","autoFocus","error","onChange","e","target","value","type","fullWidth","handleConfirm","buttonText","PassPhrase","passPhrase","passPhraseState","passPhraseMissingError","errors","setErrors","setOpen","score","resp","strength","setStrength","strengthResp","0","1","2","3","4","container","item","helperText","zxcvbn","class","variant","length","pt","disabled","loading","preventDefault","err","handleSubmit","mainButtonText","size","modalButtonText","openpgp","require","formField","paddingLeft","paddingRight","paddingBottom","Result","openPub","setOpenPub","openPriv","setOpenPriv","dlKey","name","element","file","Blob","href","URL","createObjectURL","download","click","encKeys","heading","gutterBottom","pb","privateKeyArmored","mb","publicKeyArmored","KeyGen","undefined","setKey","email","keyFields","setKeyFields","setLoading","emailNull","emailFormat","emMessage","handleCreate","passKey","a","generateKey","userIds","rsaBits","passphrase","handleFormSubmit","nameNull","validFormat","test","p","onSubmit"],"mappings":"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","file":"static/js/8.2ff2a81e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\n\nconst useStyles = makeStyles((theme) => ({\n\n  result: {\n    maxHeight: \"100px\",\n    maxWidth: \"350px\",\n    overflowY: \"scroll\",\n  },\n  button: {\n    margin: \"5px\",\n  },\n  copy: {\n    marginLeft: \"318px\",\n  },\n}));\n\n  \n  const Display = (props) => {\n    const classes = useStyles();\n    const [openSnack, setOpenSnack] = useState({\n      open: false,\n      vertical: \"bottom\",\n      horizontal: \"left\",\n    });\n  \n    const { vertical, horizontal, open } = openSnack;\n  \n    let inputId = props.id;\n    let keyIn = props.val;\n  \n    const handleCopy = () => {\n      setOpenSnack({ ...openSnack, open: true });\n      let copyText = document.getElementById(inputId).textContent;\n      const textArea = document.createElement(\"textarea\");\n      textArea.setAttribute(\"id\", \"copy\");\n      textArea.textContent = copyText;\n      document.body.append(textArea);\n      textArea.select();\n      textArea.setSelectionRange(0, 99999); /*For mobile devices*/\n  \n      /* Copy the text inside the text field */\n      document.execCommand(\"copy\");\n      textArea.remove();\n    };\n  \n    const handleClose = () => {\n      setOpenSnack({ ...openSnack, open: false });\n    };\n    return (\n      <>\n        <div className={classes.copy}>\n          <Tooltip title=\"Copy\">\n            <IconButton aria-label=\"Copy\" onClick={handleCopy}>\n              <FileCopyIcon />\n            </IconButton>\n          </Tooltip>\n        </div>\n        <Paper className={classes.result}>\n            <pre id={inputId}>{keyIn}</pre>\n        </Paper>\n  \n        <Snackbar\n          anchorOrigin={{ vertical, horizontal }}\n          open={open}\n          onClose={handleClose}\n          message=\"Copied to clipboard\"\n          key={vertical + horizontal}\n        />\n      </>\n    );\n  };\n  \n  export default Display;","import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport zxcvbn from \"zxcvbn\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst useStyles = makeStyles((theme) => ({\n  pwInput: {\n    width: \"225px\",\n  },\n  pw: {\n    color: \"#777fa7\",\n    marginTop: \"18px\",\n  },\n  buttonProgress: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n  main: {\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      padding: theme.spacing(2),\n    },\n  },\n}));\n\nconst PassPhraseConfirm = (props) => {\n  const [confirmPassPhrase, setConfirmPassPhrase] = useState();\n\n  const passPhraseConfirmBuffer = (e) => {\n    setConfirmPassPhrase(e.target.value);\n  };\n\n  const status = props.open;\n\n  const label = props.confirmError\n    ? \"Please Try Again\"\n    : \"PassPhrase Confirmation\";\n\n  return (\n    <div>\n      <Dialog\n        open={status}\n        onClose={props.handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">\n          PassPhrase Confirmation\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please re enter your passphrase below:\n          </DialogContentText>\n          <TextField\n            required\n            autoFocus\n            error={props.confirmError}\n            onChange={passPhraseConfirmBuffer}\n            margin=\"dense\"\n            id=\"name\"\n            label={label}\n            type=\"password\"\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            onClick={() => props.handleConfirm(confirmPassPhrase)}\n            color=\"primary\"\n          >\n            {props.buttonText}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nconst PassPhrase = (props) => {\n  const classes = useStyles();\n\n  const [passPhrase, passPhraseState] = useState(\"\");\n  const [errors, setErrors] = useState({\n    confirmError: false,\n    passPhraseMissingError: false,\n  });\n  const [open, setOpen] = useState(false);\n  const [strength, setStrength] = useState({ score: null, resp: null });\n\n  let strengthResp = {\n    0: \"Very Bad 👎\",\n    1: \"Bad 👎\",\n    2: \"Weak 😐\",\n    3: \"Good 🙂\",\n    4: \"Strong 🔥🔥🔥\",\n  };\n\n  const handlePassPhrase = (e) => {\n    passPhraseState(e.target.value);\n    const result = zxcvbn(e.target.value);\n    setStrength({\n      score: result.score === 0 ? \"1\" : result.score,\n      resp: strengthResp[result.score],\n    });\n  };\n\n  let handleSubmit = (e) => {\n    e.preventDefault();\n    setErrors({ ...errors, passPhraseMissingError: false });\n    const err = props.handleSubmit(e);\n\n    if (!passPhrase) {\n      setErrors({ ...errors, passPhraseMissingError: true });\n    }\n    if (!passPhrase || err) {\n      return;\n    } else {\n      setOpen(true);\n    }\n  };\n\n  const handleConfirm = (confirmPassPhrase) => {\n    if (confirmPassPhrase === passPhrase) {\n      setOpen(false);\n      props.handleConfirm(passPhrase);\n    } else {\n      setErrors({ ...errors, confirmError: true });\n    }\n  };\n\n  return (\n    <div className={classes.main}>\n      <Box>\n        <Grid container spacing={1}>\n          <Grid item>\n            <TextField\n              required\n              helperText={\n                errors.passPhraseMissingError && \"PassPhrase Required!\"\n              }\n              onChange={handlePassPhrase}\n              className={props.class}\n              error={errors.passPhraseMissingError}\n              id=\"pw-in\"\n              type=\"password\"\n              label={\"PassPhrase\"}\n              variant=\"outlined\"\n              // variant=\"filled\"\n            />\n          </Grid>\n          {passPhrase.length > 0 && (\n            <Grid className={classes.pw} item>\n              {strength.resp}\n            </Grid>\n          )}\n        </Grid>\n      </Box>\n\n      <Box pt={3}>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color={\"primary\"}\n          disabled={props.loading}\n          onClick={handleSubmit}\n        >\n          {props.mainButtonText}\n          {props.loading && (\n            <CircularProgress\n              size={24}\n              color=\"primary\"\n              className={classes.buttonProgress}\n            />\n          )}\n        </Button>\n      </Box>\n\n      <PassPhraseConfirm\n        open={open}\n        buttonText={props.modalButtonText}\n        handleClose={() => setOpen(false)}\n        handleConfirm={handleConfirm}\n        confirmError={errors.confirmError}\n      />\n    </div>\n  );\n};\n\nexport default PassPhrase;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport PassPhrase from \"../utils/Passphrase\";\n\nimport Display from \"../utils/BrowserResult\";\n\nconst openpgp = require(\"openpgp\");\n\nconst useStyles = makeStyles((theme) => ({\n  formField: {\n    width: \"350px\",\n  },\n  pwInput: {\n    width: \"350px\",\n  },\n\n  main: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n  },\n\n  button: {\n    margin: \"5px\",\n  },\n\n}));\n\nconst KeyGen = (props) => {\n\n  const classes = useStyles();\n  const [key, setKey] = useState(undefined);\n  const [keyFields, setKeyFields] = useState({ name: \"\", email: \"\", pw: \"\" });\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({\n    name: false,\n    emailNull: false,\n    emailFormat: false,\n    emMessage: false,\n  });\n\n  const handleCreate = async (passKey) => {\n    setLoading(true);\n    const key = await openpgp.generateKey({\n      userIds: [{ name: keyFields.name, email: keyFields.email }],\n      rsaBits: 4096, // RSA key size\n      passphrase: passKey,\n    });\n    setKey(key);\n    setLoading(false);\n  };\n\n  let handleEmailValid = (email) => {\n    let re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    if (re.test(email)) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const handleName = (e) => {\n    setKeyFields({ ...keyFields, name: e.target.value });\n  };\n  const handleEmail = (e) => {\n    setKeyFields({ ...keyFields, email: e.target.value });\n  };\n\n  const handleFormSubmit = () => {\n    let nameNull,\n      emailNull,\n      validFormat,\n      emMessage = false;\n    if (keyFields.name === \"\") {\n      nameNull = true;\n    }\n    if (keyFields.email === \"\") {\n      emailNull = true;\n      emMessage = \"Email Required!\";\n    } else {\n      validFormat = handleEmailValid(keyFields.email);\n      emMessage = \"Invalid Email Format!\";\n    }\n    setErrors({\n      ...errors,\n      name: nameNull,\n      emailNull: emailNull,\n      emailFormat: validFormat,\n      emMessage: emMessage,\n    });\n    if (validFormat || emailNull || nameNull) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const handleConfirm = (key) => {\n    handleCreate(key);\n  };\n\n  return (\n    <Box p={2}>\n      {typeof key == \"undefined\" ? (\n        <>\n          <form onSubmit={(e) => handleFormSubmit(e)}>\n            <div className={classes.main}>\n              <Typography className={classes.heading} variant=\"h5\" gutterBottom>\n                <b> RSA Key Generation</b>\n              </Typography>\n              <Box pb={4} pt={2}>\n                <p>Creating Keys is simple. Just fill out this form.</p>\n                <p>\n                  No worries if you don't want to use your name or email addres.\n                  Just make one up!\n                </p>\n                <b>Just don't lose you Private Key and Passphrase!</b>\n              </Box>\n              <Box pb={4}>\n                <TextField\n                  required\n                  className={classes.formField}\n                  id=\"outlined-required\"\n                  label=\"Name\"\n                  onChange={handleName}\n                  error={errors.name}\n                  helperText={errors.name && \"Text Required!\"}\n                  variant=\"outlined\"\n                />\n              </Box>\n\n              <Box>\n                {\" \"}\n                <TextField\n                  required\n                  className={classes.formField}\n                  id=\"outlined-disabled\"\n                  label=\"email\"\n                  onChange={handleEmail}\n                  error={errors.emailNull || errors.emailFormat}\n                  helperText={\n                    (errors.emailNull || errors.emailFormat) && errors.emMessage\n                  }\n                  variant=\"outlined\"\n                />\n              </Box>\n            </div>\n            <PassPhrase\n              class={classes.pwInput}\n              loading={loading}\n              mainButtonText={\"Generate\"}\n              modalButtonText={\"Submit\"}\n              handleSubmit={handleFormSubmit}\n              handleConfirm={handleConfirm}\n            />\n          </form>\n        </>\n      ) : (\n        <Result encKeys={key} />\n      )}\n    </Box>\n  );\n};\n\nconst Result = (props) => {\n  const classes = useStyles();\n\n  const [openPub, setOpenPub] = useState(false);\n  const [openPriv, setOpenPriv] = useState(false);\n\n  const dlKey = (key, name) => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([key], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = name + \".txt\";\n    element.click();\n    element.remove();\n  };\n\n  let encKeys = props.encKeys;\n\n  return (\n      <div className={classes.main}>\n        <Box>\n          <Typography className={classes.heading} variant=\"h5\" gutterBottom>\n            <b> Key Results </b>\n          </Typography>\n          <br />\n          <br />\n\n          <Typography\n            className={classes.heading}\n            color=\"primary\"\n            variant=\"h6\"\n            gutterBottom\n          >\n            Private Key\n          </Typography>\n\n          <Box pb={2}>\n            <Typography color=\"error\">\n              <b>The private is private. NEVER SHARE YOUR PRIVATE KEY</b>\n            </Typography>\n            <p>\n              Use the private key for decrypting data encrypted with your public\n              key.\n            </p>\n          </Box>\n          <Box pb={4}>\n            <Button\n              onClick={() => setOpenPriv(!openPriv)}\n              variant=\"outlined\"\n              color={\"primary\"}\n              className={classes.button}\n            >\n              {openPriv ? \"Hide\" : \"In Browser\"}\n            </Button>\n            <Button\n              onClick={() => dlKey(encKeys.privateKeyArmored, \"private_key\")}\n              variant=\"outlined\"\n              color={\"primary\"}\n              className={classes.button}\n            >\n              Download\n            </Button>\n\n            {openPriv && (\n              <Display val={encKeys.privateKeyArmored} id=\"privateKey\" />\n            )}\n          </Box>\n          <Typography\n            color=\"secondary\"\n            className={classes.heading}\n            variant=\"h6\"\n            gutterBottom\n          >\n            Public Key\n          </Typography>\n\n          <Box pb={2}>\n            <p>The public key is public. You could share it with anyone.</p>\n            <p>\n              The public key encrypts files that only your private key can\n              decrypt.\n            </p>\n          </Box>\n          <Box mb={2}>\n            <Button\n              onClick={() => setOpenPub(!openPub)}\n              variant=\"outlined\"\n              color={\"secondary\"}\n              className={classes.button}\n            >\n              {openPub ? \"Hide\" : \"In Browser\"}\n            </Button>\n            <Button\n              onClick={() => dlKey(encKeys.publicKeyArmored, \"public_key\")}\n              variant=\"outlined\"\n              color={\"secondary\"}\n              className={classes.button}\n            >\n              Download\n            </Button>\n\n            {openPub && (\n              <Display val={encKeys.publicKeyArmored} id=\"publicKey\" />\n            )}\n          </Box>\n        </Box>\n      </div>\n  );\n};\nexport default KeyGen;\n"],"sourceRoot":""}