{"version":3,"sources":["components/utils/utils.js","components/utils/BrowserResult.js","components/utils/config.js","components/utils/EncTypeTab.js","components/utils/Passphrase.js","components/utils/KeyInput.js","components/encrypt/EncResult.js","components/encrypt/EncryptForm.js","components/encrypt/Encrypt.js"],"names":["FileType","require","mimes","txt","csv","html","css","extSelect","decrypted","decType","a","fileType","fromBuffer","bufferType","ext","decFormat","show","severity","message","decGeneric","decPW","decSuccess","encSuccess","encError","resetAlert","keyError","privKeyPassError","useStyles","makeStyles","theme","result","maxHeight","maxWidth","overflowY","button","margin","copy","marginLeft","Display","props","classes","useState","open","vertical","horizontal","openSnack","setOpenSnack","inputId","id","keyIn","val","className","title","aria-label","onClick","copyText","document","getElementById","textContent","textArea","createElement","setAttribute","body","append","select","setSelectionRange","execCommand","remove","anchorOrigin","onClose","key","snackLocation","AntTabs","withStyles","root","borderBottom","indicator","backgroundColor","Tabs","AntTab","textTransform","minWidth","fontWeight","typography","fontWeightRegular","marginRight","spacing","fontFamily","join","color","opacity","fontWeightMedium","selected","disableRipple","flexGrow","padding","demo1","palette","background","paper","demo2","EncTypeTab","React","value","setValue","onChange","event","newValue","handleType","label","pwInput","width","pw","marginTop","buttonProgress","position","top","left","main","breakpoints","up","PassPhraseConfirm","confirmPassPhrase","setConfirmPassPhrase","status","confirmError","handleClose","aria-labelledby","required","autoFocus","error","e","target","type","fullWidth","handleConfirm","buttonText","PassPhrase","passPhrase","passPhraseState","passPhraseMissingError","errors","setErrors","setOpen","score","resp","strength","setStrength","strengthResp","0","1","2","3","4","container","item","helperText","zxcvbn","class","variant","length","pt","disabled","loading","preventDefault","err","handleSubmit","mainButtonText","size","modalButtonText","openpgp","keyHead","hr","InFile","selectedFile","fileMetaData","name","setUploadedFile","setFileMetaData","mt","click","style","visibility","readFile","KeyInput","inputType","privateKey","encrypt","resetErr","alert","setAlert","byteKey","setByteKey","inputTypeSelect","setInputTypeSelect","formTextInputError","setFormTextInputError","formByteInputError","setFormByteInputError","passPhraseError","setPassPhraseError","setPassPhrase","reason","textBox","multiline","rows","buttonLabel","file","files","reader","FileReader","readAsText","replace","onload","onerror","handlePrivateKey","outkey","handlePublicKey","handleKeyEncrypt","readArmored","rsaKey","keys","undefined","decrypt","output","autoHideDuration","component","row","defaultValue","control","labelPlacement","height","Result","openEnc","setOpenEnc","armorTxt","disableCopy","Box","Typography","gutterBottom","mb","pr","Button","textVal","element","Blob","href","URL","createObjectURL","download","split","outputHandler","reset","paddingLeft","paddingRight","paddingBottom","FormLabel","IconButton","EncryptForm","textInput","textInputState","uploadedFile","TextField","readAsArrayBuffer","Uint8Array","handleFormSubmit","handleEncrypt","encryptionKey","aes","rsa","encType","onSubmit","pb","FormControl","RadioGroup","FormControlLabel","Radio","loader","keyErr","display","header","Encrypt","success","setSuccess","setLoader","setEncType","setArmorTxt","byteEncrypt","pubKey","binInd","inputMessage","fromBinary","fromText","encIn","armor","publicKeys","passwords","packets","write","form","Snackbar","Alert","p","heading"],"mappings":"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","file":"static/js/6.1ccec5a7.chunk.js","sourcesContent":["const FileType = require(\"file-type\");\n\nexport const mimes = {\n  txt: \"text/plain\",\n  csv: \"text/csv\",\n  html: \"text/html\",\n  css: \"text/css\",\n};\n\nexport const extSelect = async (decrypted, decType) => {\n  let bufferType\n  if (decType.fileType==='byte'){\n    bufferType =  await FileType.fromBuffer(decrypted);\n  }\n\n  if (bufferType) {\n    return bufferType.ext;\n  } else if (decType.fileType === \"text\") {\n    return decType.ext;\n  } else {\n    return \"txt\";\n  }\n};\n\nexport const decFormat = {\n  show: true,\n  severity: \"error\",\n  message:\n    \"Looks like there is a format issue with your Encrypted text. We recommend using the original text file supplied!\",\n};\n\nexport const decGeneric = {\n  show: true,\n  severity: \"error\",\n  message: \"Something went wrong! Please try again.\",\n};\n\nexport const decPW = {\n  show: true,\n  severity: \"error\",\n  message: \"Passphrase is incorrect!\",\n};\n\nexport const decSuccess = {\n  show: true,\n  severity: \"success\",\n  message: \"Successfully decrypted!\",\n};\n\nexport const encSuccess = {\n  show: true,\n  message: \"Encryption Complete\",\n  severity: \"success\",\n}\n\nexport const encError = {\n  show: true,\n  message: \"Something went wrong! Please try again.\",\n  severity: \"error\",\n};\n\nexport const resetAlert = {\n  show: false,\n  message: \"\",\n  severity: \"\",\n};\n\n\nexport const keyError = {\n  show: true,\n  message: \"Invalid RSA Key! Please try again.\",\n  severity: \"error\",\n};\n\nexport const privKeyPassError = {\n  show: true,\n  message: \"Incorrect Passphrase! Please try again.\",\n  severity: \"error\",\n};\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\n\nconst useStyles = makeStyles((theme) => ({\n\n  result: {\n    maxHeight: \"100px\",\n    maxWidth: \"350px\",\n    overflowY: \"scroll\",\n  },\n  button: {\n    margin: \"5px\",\n  },\n  copy: {\n    marginLeft: \"318px\",\n  },\n}));\n\n  \n  const Display = (props) => {\n    const classes = useStyles();\n    const [openSnack, setOpenSnack] = useState({\n      open: false,\n      vertical: \"bottom\",\n      horizontal: \"left\",\n    });\n  \n    const { vertical, horizontal, open } = openSnack;\n  \n    let inputId = props.id;\n    let keyIn = props.val;\n  \n    const handleCopy = () => {\n      setOpenSnack({ ...openSnack, open: true });\n      let copyText = document.getElementById(inputId).textContent;\n      const textArea = document.createElement(\"textarea\");\n      textArea.setAttribute(\"id\", \"copy\");\n      textArea.textContent = copyText;\n      document.body.append(textArea);\n      textArea.select();\n      textArea.setSelectionRange(0, 99999); /*For mobile devices*/\n  \n      /* Copy the text inside the text field */\n      document.execCommand(\"copy\");\n      textArea.remove();\n    };\n  \n    const handleClose = () => {\n      setOpenSnack({ ...openSnack, open: false });\n    };\n    return (\n      <>\n        <div className={classes.copy}>\n          <Tooltip title=\"Copy\">\n            <IconButton aria-label=\"Copy\" onClick={handleCopy}>\n              <FileCopyIcon />\n            </IconButton>\n          </Tooltip>\n        </div>\n        <Paper className={classes.result}>\n            <pre id={inputId}>{keyIn}</pre>\n        </Paper>\n  \n        <Snackbar\n          anchorOrigin={{ vertical, horizontal }}\n          open={open}\n          onClose={handleClose}\n          message=\"Copied to clipboard\"\n          key={vertical + horizontal}\n        />\n      </>\n    );\n  };\n  \n  export default Display;","export const snackLocation = { vertical: \"bottom\", horizontal: \"left\" }\n\nexport const menuOptions = {1:'ENCRYPT', 2:'DECRYPT', 3: 'KEY CREATION', 4: 'ABOUT'}","import React from \"react\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst AntTabs = withStyles({\n  root: {\n    borderBottom: \"1px solid #e8e8e8\",\n    // width: '700px'\n  },\n  indicator: {\n    backgroundColor: \"#1de9b6\",\n  },\n})(Tabs);\n\nconst AntTab = withStyles((theme) => ({\n  root: {\n    textTransform: \"none\",\n    minWidth: 72,\n    fontWeight: theme.typography.fontWeightRegular,\n    marginRight: theme.spacing(4),\n    fontFamily: [\n      \"-apple-system\",\n      \"BlinkMacSystemFont\",\n      '\"Segoe UI\"',\n      \"Roboto\",\n      '\"Helvetica Neue\"',\n      \"Arial\",\n      \"sans-serif\",\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(\",\"),\n    \"&:hover\": {\n      color: \"#4aedc4\",\n      opacity: 1,\n    },\n    \"&$selected\": {\n      color: \"#1de9b6\",\n      fontWeight: theme.typography.fontWeightMedium,\n    },\n    \"&:focus\": {\n      color: \"#1de9b6\",\n    },\n  },\n  selected: {},\n}))((props) => <Tab disableRipple {...props} />);\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    // maxWidth:'600px'\n    // marginRight:'50%',\n  },\n  padding: {\n    padding: theme.spacing(2),\n  },\n  demo1: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  demo2: {\n    backgroundColor: \"#2e1534\",\n  },\n}));\n\nexport default function EncTypeTab(props) {\n  //lift up to reset on load of new tab\n\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n    props.handleType(newValue);\n  };\n  return (\n    <div className={classes.root}>\n      <AntTabs value={value} onChange={handleChange} aria-label=\"ant example\">\n        <AntTab label=\"Passhrase (Symmetric)\" />\n        <AntTab label=\"Key Pair (Asymmetric)\" />\n      </AntTabs>\n      <Typography className={classes.padding} />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport zxcvbn from \"zxcvbn\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst useStyles = makeStyles((theme) => ({\n  pwInput: {\n    width: \"225px\",\n  },\n  pw: {\n    color: \"#777fa7\",\n    marginTop: \"18px\",\n  },\n  buttonProgress: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n  main: {\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      padding: theme.spacing(2),\n    },\n  },\n}));\n\nconst PassPhraseConfirm = (props) => {\n  const [confirmPassPhrase, setConfirmPassPhrase] = useState();\n\n  const passPhraseConfirmBuffer = (e) => {\n    setConfirmPassPhrase(e.target.value);\n  };\n\n  const status = props.open;\n\n  const label = props.confirmError\n    ? \"Please Try Again\"\n    : \"PassPhrase Confirmation\";\n\n  return (\n    <div>\n      <Dialog\n        open={status}\n        onClose={props.handleClose}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">\n          PassPhrase Confirmation\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please re enter your passphrase below:\n          </DialogContentText>\n          <TextField\n            required\n            autoFocus\n            error={props.confirmError}\n            onChange={passPhraseConfirmBuffer}\n            margin=\"dense\"\n            id=\"name\"\n            label={label}\n            type=\"password\"\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            onClick={() => props.handleConfirm(confirmPassPhrase)}\n            color=\"primary\"\n          >\n            {props.buttonText}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nconst PassPhrase = (props) => {\n  const classes = useStyles();\n\n  const [passPhrase, passPhraseState] = useState(\"\");\n  const [errors, setErrors] = useState({\n    confirmError: false,\n    passPhraseMissingError: false,\n  });\n  const [open, setOpen] = useState(false);\n  const [strength, setStrength] = useState({ score: null, resp: null });\n\n  let strengthResp = {\n    0: \"Very Bad 👎\",\n    1: \"Bad 👎\",\n    2: \"Weak 😐\",\n    3: \"Good 🙂\",\n    4: \"Strong 🔥🔥🔥\",\n  };\n\n  const handlePassPhrase = (e) => {\n    passPhraseState(e.target.value);\n    const result = zxcvbn(e.target.value);\n    setStrength({\n      score: result.score === 0 ? \"1\" : result.score,\n      resp: strengthResp[result.score],\n    });\n  };\n\n  let handleSubmit = (e) => {\n    e.preventDefault();\n    setErrors({ ...errors, passPhraseMissingError: false });\n    const err = props.handleSubmit(e);\n\n    if (!passPhrase) {\n      setErrors({ ...errors, passPhraseMissingError: true });\n    }\n    if (!passPhrase || err) {\n      return;\n    } else {\n      setOpen(true);\n    }\n  };\n\n  const handleConfirm = (confirmPassPhrase) => {\n    if (confirmPassPhrase === passPhrase) {\n      setOpen(false);\n      props.handleConfirm(passPhrase);\n    } else {\n      setErrors({ ...errors, confirmError: true });\n    }\n  };\n\n  return (\n    <div className={classes.main}>\n      <Box>\n        <Grid container spacing={1}>\n          <Grid item>\n            <TextField\n              required\n              helperText={\n                errors.passPhraseMissingError && \"PassPhrase Required!\"\n              }\n              onChange={handlePassPhrase}\n              className={props.class}\n              error={errors.passPhraseMissingError}\n              id=\"pw-in\"\n              type=\"password\"\n              label={\"PassPhrase\"}\n              variant=\"outlined\"\n              // variant=\"filled\"\n            />\n          </Grid>\n          {passPhrase.length > 0 && (\n            <Grid className={classes.pw} item>\n              {strength.resp}\n            </Grid>\n          )}\n        </Grid>\n      </Box>\n\n      <Box pt={3}>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color={\"primary\"}\n          disabled={props.loading}\n          onClick={handleSubmit}\n        >\n          {props.mainButtonText}\n          {props.loading && (\n            <CircularProgress\n              size={24}\n              color=\"primary\"\n              className={classes.buttonProgress}\n            />\n          )}\n        </Button>\n      </Box>\n\n      <PassPhraseConfirm\n        open={open}\n        buttonText={props.modalButtonText}\n        handleClose={() => setOpen(false)}\n        handleConfirm={handleConfirm}\n        confirmError={errors.confirmError}\n      />\n    </div>\n  );\n};\n\nexport default PassPhrase;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport DeleteOutlineSharpIcon from \"@material-ui/icons/DeleteOutlineSharp\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { resetAlert, keyError, privKeyPassError } from \"../utils/utils\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {snackLocation} from '../utils/config';\nimport { grey } from \"@material-ui/core/colors\";\n\nconst openpgp = require(\"openpgp\");\n\nconst useStyles = makeStyles((theme) => ({\n  keyHead: {\n    color: \"rgba(0, 0, 0, 0.54)\",\n  },\n  buttonProgress: {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n  hr: {\n    color: \"rgba(0, 0, 0, 0.54)\",\n  },\n  main: {\n    backgroundColor: '#FAFAFA',\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      padding: theme.spacing(2),\n    },\n  }\n}\n));\n\nconst InFile = (props) => {\n  const handleDelete = () => {\n    props.setUploadedFile(null);\n    props.setFileMetaData(null);\n  };\n  const selectedFile = props.fileMetaData && (\n    <>\n      <FormLabel>{`Selected: ${props.fileMetaData.name}`}</FormLabel>\n      <IconButton onClick={handleDelete}>\n        <DeleteOutlineSharpIcon />\n      </IconButton>\n    </>\n  );\n  return (\n    <Box>\n      <Box mt={1}>\n        <Button\n          onClick={() => document.getElementById(\"keyInput\").click()}\n          variant=\"outlined\"\n          color=\"secondary\"\n        >\n          Browse for RSA Key\n        </Button>\n\n        {selectedFile}\n        {props.err.err && (\n          <p\n            class=\"MuiFormHelperText-root MuiFormHelperText-contained Mui-error Mui-required\"\n            id=\"pw-in-helper-text\"\n          >\n            {props.err.message}\n          </p>\n        )}\n        <input\n          id=\"keyInput\"\n          type=\"file\"\n          style={{ visibility: \"hidden\" }}\n          onChange={props.readFile}\n        />\n      </Box>\n    </Box>\n  );\n};\n\nconst KeyInput = (props) => {\n  const classes = useStyles();\n\n  let privateKey = props.privateKey\n  let encrypt = props.encrypt\n\n  let resetErr = { err: false, key: false, message: false };\n\n  const [alert, setAlert] = useState(resetAlert);\n  const [byteKey, setByteKey] = useState();\n  const [inputTypeSelect, setInputTypeSelect] = useState(\"byte\");\n  const [formTextInputError, setFormTextInputError] = useState(resetErr);\n  const [formByteInputError, setFormByteInputError] = useState(resetErr);\n  const [fileMetaData, setFileMetaData] = useState();\n  const [passPhraseError, setPassPhraseError] = useState(false);\n  const [passPhrase, setPassPhrase] = useState(\"\");\n\n  const handlePassPhrase = (e) => setPassPhrase(e.target.value);\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setAlert(resetAlert);\n  };\n\n  const handleTextInput = (e) => {\n    setByteKey(e.target.value);\n  };\n\n  const handleInputType = (e) => {\n    setInputTypeSelect(e.target.value);\n  };\n\n  const readKey = (e) => {\n    var file = e.target.files[0];\n    if (!file) return;\n    var reader = new FileReader();\n    reader.readAsText(file);\n    setFileMetaData({ name: file.name, type: file.type.replace(\"/\", \"_\") });\n    reader.onload = () => {\n      setByteKey(reader.result);\n    };\n    reader.onerror = function () {};\n  };\n\n  let inputType;\n  if (inputTypeSelect === \"text\") {\n    inputType = (\n      <TextField\n        helperText={formTextInputError.err && formTextInputError.message}\n        className={classes.textBox}\n        fullWidth={true}\n        error={formTextInputError.err}\n        id=\"outlined-multiline-static\"\n        label={\"RSA Key Input\"}\n        multiline\n        rows={10}\n        onChange={handleTextInput}\n        variant=\"outlined\"\n      />\n    );\n  } else {\n    inputType = (\n      <InFile\n        buttonLabel={\"key browse\"}\n        fileMetaData={fileMetaData}\n        err={formByteInputError}\n        formByteInputError={formByteInputError}\n        readFile={readKey}\n        setUploadedFile={setByteKey}\n        setFileMetaData={setFileMetaData}\n      />\n    );\n  }\n\n  const removeErrors = () => {\n    setAlert(resetAlert);\n    setFormTextInputError(resetErr);\n    setFormByteInputError(resetErr);\n    setPassPhraseError(false);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    removeErrors();\n\n    let err = false,\n      outkey;\n\n    if (passPhrase === \"\") {\n      setPassPhraseError(true);\n      err = true;\n    }\n\n    if (!byteKey || byteKey === \"\") {\n      if (inputTypeSelect === \"text\") {\n        setFormTextInputError({\n          ...formTextInputError,\n          err: true,\n          message: \"Key Text Required\",\n        });\n      } else {\n        setFormByteInputError({\n          ...formByteInputError,\n          err: true,\n          message: \"Key File Required\",\n        });\n      }\n      err = true;\n    } else {\n      privateKey\n        ? ({ key: outkey, error: err } = await handlePrivateKey(\n            byteKey,\n            passPhrase\n          ))\n        : ({ key: outkey, error: err } = await handlePublicKey(byteKey));\n    }\n\n    //continue to snag error in other input\n\n    props.handleKeyEncrypt(outkey, err);\n  };\n\n  const handlePublicKey = async (byteKey) => {\n    let rsaKey = (await openpgp.key.readArmored(byteKey)).keys[0];\n    if (!rsaKey) {\n      setAlert(keyError);\n      return { key: undefined, error: true };\n    } else {\n      return { key: rsaKey, error: false };\n    }\n  };\n\n  const handlePrivateKey = async (byteKey, passPhrase) => {\n    let output;\n    try {\n      const {\n        keys: [privateKey],\n      } = await openpgp.key.readArmored(byteKey);\n      await privateKey.decrypt(passPhrase);\n      output = [privateKey];\n      return { key: output, error: false };\n    } catch (e) {\n      e.message === \"Incorrect key passphrase\" && setAlert(privKeyPassError);\n      e.message === \"privateKey is undefined\" && setAlert(keyError);\n      return { key: undefined, error: true };\n    }\n  };\n\n  return (\n    <div className={classes.main}>\n      {alert.show && (\n        <Snackbar\n          anchorOrigin={snackLocation}\n          open={alert.show}\n          autoHideDuration={10000}\n          onClose={handleClose}\n        >\n          <Alert onClose={handleClose} severity={alert.severity}>\n            {alert.message}\n          </Alert>\n        </Snackbar>\n      )}\n      <Box>\n        <Box>\n          {/* <hr className={classes.hr}></hr> */}\n          <div className={classes.keyHead}>\n            <h3>Key Input</h3>\n          </div>\n          <FormControl component=\"fieldset\">\n            <RadioGroup\n              row\n              aria-label=\"position\"\n              name=\"position\"\n              value={inputTypeSelect}\n              defaultValue=\"top\"\n              onChange={handleInputType}\n            >\n              <FormControlLabel\n                value=\"byte\"\n                control={<Radio color=\"secondary\" />}\n                label=\"Import from file\"\n                labelPlacement=\"end\"\n              />\n              <FormControlLabel\n                value=\"text\"\n                control={<Radio color=\"primary\" />}\n                label=\"Paste in text\"\n                labelPlacement=\"end\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </Box>\n        <Box>\n          <FormLabel component=\"legend\"></FormLabel>\n          <Box mt={3}>{inputType}</Box>\n        </Box>\n        {privateKey && (\n          <Box pt={3}>\n            <TextField\n              required\n              helperText={passPhraseError && \"PassPhrase Required!\"}\n              onChange={handlePassPhrase}\n              // className={props.class}\n              error={passPhraseError}\n              id=\"pw-in private key\"\n              type=\"password\"\n              label={\"Private Key PassPhrase\"}\n              variant=\"outlined\"\n              // variant=\"filled\"\n            />\n          </Box>\n        )}\n        <Box pt={3}>\n          <Button variant=\"contained\" color={\"primary\"} onClick={handleSubmit} disabled={props.loading}>\n            {encrypt ? \"Encrypt!\" : \"Decrypt!\"}\n            {props.loading && (\n            <CircularProgress\n              size={24}\n              color=\"primary\"\n              className={classes.buttonProgress}\n            />\n          )}\n          </Button>\n        </Box>\n      </Box>\n    </div>\n  );\n};\n\nexport default KeyInput;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Display from \"../utils/BrowserResult\";\n\nconst useStyles = makeStyles((theme) => ({\n  main: {\n    padding: theme.spacing(2),\n\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      padding: theme.spacing(2),\n    },\n  },\n\n  result: {\n    maxHeight: \"100px\",\n    maxWidth: \"350px\",\n    overflowY: \"scroll\",\n  },\n  paper: {\n    height: \"100px\",\n    width: \"350px\",\n  },\n  button: {\n    margin: \"5px\",\n  },\n}));\n\nconst Result = (props) => {\n  const classes = useStyles();\n\n  const [openEnc, setOpenEnc] = useState(false);\n\n  let armorTxt = props.armorTxt;\n  let disableCopy = armorTxt.armorTxt.length > 10000;\n\n  const outputHandler = (textVal) => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([textVal.armorTxt], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = `${element.href.split(\"/\")[3]}_${textVal.ext}_.aes\"`;\n    element.click();\n    element.remove();\n  };\n\n  return (\n    <div className={classes.main}>\n      <Box pt={2}>\n        <Typography variant=\"h6\" gutterBottom>\n          Encrypted Data:\n        </Typography>\n        <Box>\n          <p>Here are your results.</p>\n          <p> We recommend downloading the file.</p>\n          <p>\n            Don't worry, if you prefer working with text yourself, we provide\n            that too.{\" \"}\n          </p>\n          <br />\n        </Box>\n        <Box mb={2} pr={4}>\n          <Button\n            disabled={disableCopy}\n            onClick={() => setOpenEnc(!openEnc)}\n            variant=\"outlined\"\n            color={\"secondary\"}\n            className={classes.button}\n          >\n            {!openEnc ? \"In Browser\" : \"Hide\"}\n          </Button>\n\n          <Button\n            onClick={() => outputHandler(armorTxt)}\n            variant=\"outlined\"\n            color={\"secondary\"}\n            className={classes.button}\n          >\n            Download\n          </Button>\n          {openEnc && <Display val={armorTxt.armorTxt} id=\"encryptedResult\" />}\n        </Box>\n        <Box>\n          <Button\n            onClick={props.reset}\n            variant=\"contained\"\n            className={classes.button}\n            color={\"primary\"}\n          >\n            {\" \"}\n            New Encryption{\" \"}\n          </Button>\n        </Box>\n      </Box>\n    </div>\n  );\n};\n\nexport default Result;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport DeleteOutlineSharpIcon from \"@material-ui/icons/DeleteOutlineSharp\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport PassPhrase from \"../utils/Passphrase\";\nimport KeyInput from \"../utils/KeyInput\";\n\nconst useStyles = makeStyles((theme) => ({\n\n  textBox: {\n    maxWidth: \"700px\",\n  },\n  main: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n    },\n  },\n}));\n\nconst InFile = (props) => {\n  const classes = useStyles();\n\n  const handleDelete = () => {\n    props.setUploadedFile(null);\n    props.setFileMetaData(null);\n  };\n  const selectedFile = props.fileMetaData && (\n    <>\n      <FormLabel>{`Selected: ${props.fileMetaData.name}`}</FormLabel>\n      <IconButton onClick={handleDelete}>\n        <DeleteOutlineSharpIcon />\n      </IconButton>\n    </>\n  );\n  return (\n    <Box>\n      <Box mt={1}>\n        <Button\n          onClick={() => document.getElementById(\"inp\").click()}\n          variant=\"outlined\"\n          color=\"secondary\"\n        >\n          Browse for file\n        </Button>{\" \"}\n        {selectedFile}\n        {props.formByteInputError && (\n          <p\n            class=\"MuiFormHelperText-root MuiFormHelperText-contained Mui-error Mui-required\"\n            id=\"pw-in-helper-text\"\n          >\n            File Required\n          </p>\n        )}\n        <input\n          id=\"inp\"\n          type=\"file\"\n          style={{ visibility: \"hidden\" }}\n          onChange={props.readFile}\n        />\n      </Box>\n    </Box>\n  );\n};\n\nconst EncryptForm = (props) => {\n  const classes = useStyles();\n\n  //update-> handle all Files wor here. send up to handle enc + output\n  //on unmout clear all state\n  //is pw comp to handle all passphrase work\n\n  const [inputTypeSelect, setInputTypeSelect] = useState(\"byte\");\n  const [textInput, textInputState] = useState(\"\");\n  const [formTextInputError, setFormTextInputError] = useState(false);\n  const [formByteInputError, setFormByteInputError] = useState(false);\n\n  const [uploadedFile, setUploadedFile] = useState();\n  const [fileMetaData, setFileMetaData] = useState();\n\n  const readFile = (e) => {\n    var file = e.target.files[0];\n    if (!file) return;\n    var reader = new FileReader();\n    reader.readAsArrayBuffer(file);\n    setFileMetaData({ name: file.name, type: file.type.replace(\"/\", \"_\") });\n\n    reader.onload = function () {\n      setUploadedFile(new Uint8Array(reader.result));\n    };\n\n    reader.onerror = function () {};\n  };\n\n  //text input\n  const handleTextInput = (e) => {\n    textInputState(e.target.value);\n  };\n\n  const handleInputType = (e) => {\n    setFormTextInputError(false);\n    setFormByteInputError(false);\n    setInputTypeSelect(e.target.value);\n  };\n\n  let inputType;\n  if (inputTypeSelect === \"text\") {\n    inputType = (\n      <TextField\n        helperText={formTextInputError && \"Please Select a file object!\"}\n        className={classes.textBox}\n        fullWidth={true}\n        error={formTextInputError}\n        id=\"outlined-multiline-static\"\n        label=\"Text to Encrypt\"\n        multiline\n        rows={10}\n        onChange={handleTextInput}\n        variant=\"outlined\"\n      />\n    );\n  } else {\n    inputType = (\n      <InFile\n        fileMetaData={fileMetaData}\n        formByteInputError={formByteInputError}\n        readFile={readFile}\n        setUploadedFile={setUploadedFile}\n        setFileMetaData={setFileMetaData}\n      />\n    );\n  }\n\n  const handleFormSubmit = () => {\n    //TODO Needed?\n    // e && e.preventDefault();\n    setFormTextInputError(false);\n    setFormByteInputError(false);\n\n    if (inputTypeSelect === \"text\" && (!textInput || textInput === \"\")) {\n      setFormTextInputError(true);\n      return true;\n    } else if (inputTypeSelect === \"byte\" && !uploadedFile) {\n      setFormByteInputError(true);\n      return true;\n    }\n    return false;\n  };\n\n  const handleKeyEncrypt = (byteKey, keyErr) => {\n    let errCheck = handleFormSubmit();\n    if (!errCheck && !keyErr) {\n      handleEncrypt(byteKey);\n    }\n  };\n  const handleEncrypt = (encryptionKey) => {\n    let aes, rsa;\n    props.encType === 0 ? (aes = encryptionKey) : (rsa = encryptionKey);\n\n    if (inputTypeSelect === \"text\") {\n      props.handleEncrypt(aes, rsa, textInput, \"txt\", false);\n    } else {\n      props.handleEncrypt(aes, rsa, uploadedFile, fileMetaData.ext, true);\n    }\n  };\n\n  return (\n    <form onSubmit={(e) => handleFormSubmit(e)}>\n      <div className={classes.main}>\n        <Box pt={2} pb={2}>\n          <p>To Encrypt, simply fill out this form.</p>\n          {props.encType === 0 && <b>Just don't lose your Passphrase!</b>}\n        </Box>\n        <Box mb={2}>\n          <FormControl component=\"fieldset\">\n            <RadioGroup\n              row\n              aria-label=\"position\"\n              name=\"position\"\n              value={inputTypeSelect}\n              defaultValue=\"top\"\n              onChange={handleInputType}\n            >\n              <FormControlLabel\n                value=\"byte\"\n                control={<Radio color=\"secondary\" />}\n                label=\"Load my secret\"\n                labelPlacement=\"end\"\n              />\n              <FormControlLabel\n                value=\"text\"\n                control={<Radio color=\"primary\" />}\n                label=\"Type my secret\"\n                labelPlacement=\"end\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </Box>\n\n        <Box>{inputType}</Box>\n      </div>\n      {props.encType === 0 ? (\n        <PassPhrase\n          mainButtonText={\"Encrypt\"}\n          modalButtonText={\"Submit\"}\n          handleSubmit={handleFormSubmit}\n          handleConfirm={handleEncrypt}\n          loading={props.loader}\n        />\n      ) : (\n        <KeyInput\n          loading={props.loader}\n          privateKey={false}\n          encrypt={true}\n          handleKeyEncrypt={handleKeyEncrypt}\n        />\n      )}\n    </form>\n  );\n};\n\nexport default EncryptForm;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Result from \"./EncResult\";\nimport EncTypeTab from \"../utils/EncTypeTab\";\nimport EncryptForm from \"./EncryptForm\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { resetAlert, encSuccess, encError } from \"../utils/utils\";\nimport { snackLocation } from \"../utils/config\";\n\nconst openpgp = require(\"openpgp\");\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    \"& > * + *\": {\n      marginLeft: theme.spacing(2),\n    },\n  },\n  header: {\n    paddingRight: theme.spacing(2),\n    paddingLeft: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      paddingRight: theme.spacing(2),\n      paddingLeft: theme.spacing(2),\n    },\n  },\n}));\n\nconst Encrypt = () => {\n  const classes = useStyles();\n  const [success, setSuccess] = useState(false);\n  const [loader, setLoader] = useState(false);\n  const [encType, setEncType] = useState(0);\n  const [alert, setAlert] = useState(resetAlert);\n  const [armorTxt, setArmorTxt] = useState();\n\n  const byteEncrypt = async (passPhrase, pubKey, uploadedFile, ext, binInd) => {\n    try {\n      setLoader(true);\n\n      let inputMessage = binInd\n        ? openpgp.message.fromBinary(uploadedFile)\n        : openpgp.message.fromText(uploadedFile);\n\n      let encIn = {\n        message: inputMessage,\n        armor: false,\n      };\n\n      pubKey ? (encIn.publicKeys = pubKey) : (encIn.passwords = [passPhrase]);\n\n      const { message } = await openpgp.encrypt(encIn);\n      binInd && message.packets.write();\n\n      setArmorTxt({ armorTxt: message.armor(), ext: ext });\n      outputHandler();\n    } catch (e) {\n      setAlert(encError);\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setAlert(resetAlert);\n  };\n\n  const outputHandler = () => {\n    setAlert(encSuccess);\n    setSuccess(true);\n    setLoader(false);\n  };\n\n  const reset = () => {\n    setSuccess(false);\n    setAlert(resetAlert);\n  };\n\n  const handleEncType = (type) => {\n    setEncType(type);\n  };\n\n  let form = (\n    <EncryptForm\n      handleEncrypt={byteEncrypt}\n      encType={encType}\n      loader={loader}\n    />\n  );\n\n  return (\n    <div>\n      {alert.show && (\n        <Snackbar\n          anchorOrigin={snackLocation}\n          open={alert.show}\n          autoHideDuration={10000}\n          onClose={handleClose}\n        >\n          <Alert onClose={handleClose} severity={alert.severity}>\n            {alert.message}\n          </Alert>\n        </Snackbar>\n      )}\n      <Box p={2}>\n        <div className={classes.header}>\n          {!success && <EncTypeTab handleType={handleEncType} />}\n\n          <Typography className={classes.heading} variant=\"h5\" gutterBottom>\n            {encType === 0 ? (\n              <b>Passphrase Encryption</b>\n            ) : (\n              <b>Key Encryption</b>\n            )}\n          </Typography>\n        </div>\n        {success ? <Result reset={reset} armorTxt={armorTxt} /> : form}\n      </Box>\n    </div>\n  );\n};\n\nexport default Encrypt;\n"],"sourceRoot":""}